!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/build",n(n.s=48)}([function(e,t,n){"use strict";var r,i,o,a;n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return a})),function(e){e.Actors="actors",e.Film="film",e.People="people",e.Pilot="pilot",e.Planet="planet",e.PlanetsInFilms="planets_in_films",e.Specie="specie",e.Starship="starship",e.Vehicle="vehicle",e.VehiclesInFilms="vehicles_in_films",e.StarshipsInFilms="starships_in_films",e.SpeciesInFilms="species_in_films",e.Race="race",e.StarshipPilot="starship_pilot"}(r||(r={})),function(e){e.Actors="actors",e.VehiclesInFilms="vehicles_in_films",e.StarshipsInFilms="starships_in_films",e.SpeciesInFilms="species_in_films",e.PlanetsInFilms="planets_in_films",e.Resident="resident",e.Pilot="pilot",e.StarshipPilot="starship_pilot"}(i||(i={})),function(e){e.Race="race"}(o||(o={})),function(e){e.Film="film",e.People="people",e.Planet="planet",e.Specie="specie",e.Starship="starship",e.Vehicle="vehicle",e.Test="test"}(a||(a={}))},function(e,t){e.exports=require("express")},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));n(29),n(51),n(52),n(30),n(53),n(54),n(21),n(31),n(55),n(32),n(33),n(7),n(34),n(23),n(24);var r=n(25);function i(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var o=function(e){var t={};return function(n){var o=i(n).reduce((function(e,t){return e.concat(t)}),"");return Object.keys(t).some((function(e){return e===o}))?(Object(r.a)("Memoize: Data extracted From Cache"),function(){return t[o]}):(Object(r.a)("Memoize: data extracted From DB"),t[o]=e(n),function(){return t[o]})}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));n(29),n(30),n(56),n(57),n(22),n(31),n(58),n(59),n(60),n(61),n(33),n(7),n(8),n(62),n(10);var r=n(17),i=n(35),o=n(18);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(n,!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t,n,r,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function l(e,t){return function(){var n,r=(n=regeneratorRuntime.mark((function n(r){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,Object(o.a)(f(t),(function(e){return e.rows[0].json_build_object}),p(e,r),m)(Promise.resolve(t));case 2:return n.abrupt("return",n.sent);case 3:case"end":return n.stop()}}),n)})),function(){var e=this,t=arguments;return new Promise((function(r,i){var o=n.apply(e,t);function a(e){u(o,r,i,a,s,"next",e)}function s(e){u(o,r,i,a,s,"throw",e)}a(void 0)}))});return function(e){return r.apply(this,arguments)}}()}function f(e){return function(t){return Object.keys(t).reduce((function(n,r,i){return 0===i?s({},t[r]):s({},n,c({},void 0!==e?e[i-1].fieldNameInResponse:r,t[r]))}),{})}}function p(e,t){return function(n){return r.a.raw("'".concat(e,"', ( SELECT to_json(row)\n       FROM ( SELECT * FROM ").concat(e," WHERE id = :id ) \n       row \n       ),\n   ").concat(n(t),"                                 \n "),{id:t}).wrap("SELECT json_build_object(",")")}}var d=Object(i.compose)((function(e){return function(t){return{fieldName:e.tableName,query:"\n  ( SELECT json_agg(result) \n    FROM ( SELECT ".concat(e.showFields," FROM ").concat(e.tableName," \n    INNER JOIN ").concat(e.manyToManyTableName," ON ( ").concat(e.tableName,".id = ").concat(e.manyToManyTableName,".").concat(e.intersectEntityOn,")\n    WHERE ").concat(e.manyToManyTableName,".").concat(e.where," = '").concat(t,"') \n    result \n  )\n")}}}),(function(e){return s({},e,{showFields:e.showFields.reduce((function(t,n,r){return r<=0?"".concat(e.tableName,".").concat(n):t+", ".concat(e.tableName,".").concat(n)}),"")})})),m=function(e){return function(t){return void 0!==e?e.map(d).reduce((function(e,n){return""!==e?"".concat(e,", '").concat(n(t).fieldName,"', ").concat(n(t).query):"'".concat(n(t).fieldName,"', ").concat(n(t).query)}),""):""}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));n(21),n(22),n(7),n(8),n(23),n(24);var r=n(17),i=n(18),o=function(e){return r.a.select("id").from(e)},a=function(e){return Promise.all(e)},s=function(e,t){return function(){return Object(i.a)(a,(n=t,function(e){return e.map((function(e){return n(e.id)()}))}),o)(Promise.resolve(e));var n}}},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.Id="id",e.Name="name",e.Height="height",e.Mass="mass",e.HairColor="hair_color",e.SkinColor="skin_color",e.EyeColor="eye_color",e.BirthYear="birth_year",e.Gender="gender",e.Created="created",e.Edited="edited",e.Url="url"}(r||(r={}))},function(e,t,n){"use strict";var r,i;n.d(t,"a",(function(){return i})),r||(r={}),function(e){e.Id="id",e.Title="title",e.EpisodeId="episode_id",e.OpeningCrawl="opening_crawl",e.Director="director",e.Producer="producer",e.ReleaseDate="release_date",e.Created="created",e.Edited="edited",e.Url="url"}(i||(i={}))},function(e,t){e.exports=require("core-js/modules/es.object.to-string")},function(e,t){e.exports=require("core-js/modules/es.promise")},function(e,t){e.exports=require("react")},function(e,t){e.exports=require("regenerator-runtime/runtime")},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.Id="id",e.Name="name",e.Model="model",e.Manufacturer="manufacturer",e.CostInCredits="cost_in_credits",e.Lenght="length",e.MaxAtmospheringSpeed="max_atmosphering_speed",e.Crew="crew",e.Passengers="passengers",e.CargoCapacity="cargo_capacity",e.Consumables="consumables",e.VehicleClass="vehicle_class",e.Url="url"}(r||(r={}))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.Id="id",e.VehicleId="vehicle_id",e.FilmId="film_id"}(r||(r={}))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.Id="id",e.PeopleId="people_id",e.FilmId="film_id"}(r||(r={}))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.id="id",e.PeopleId="people_id",e.SpecieId="specie_id"}(r||(r={}))},function(e,t,n){"use strict";var r,i;n.d(t,"a",(function(){return r})),function(e){e.Id="id",e.VehicleId="vehicle_id",e.PeopleId="people_id"}(r||(r={})),i||(i={})},function(e,t,n){"use strict";var r,i;n.d(t,"a",(function(){return i})),r||(r={}),function(e){e.Id="id",e.StarshipId="starship_id",e.PeopleId="people_id"}(i||(i={}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=n(63)(n(64).development)},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n(66);var r=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduceRight((function(e,t,n){return e.then((function(e){return t(e)})).catch((function(e){return console.log(e)}))}),e)}}},function(e,t){e.exports=require("react-router-config")},function(e,t,n){"use strict";var r=n(9),i=[{path:"/home",component:function(e){return r.createElement("div",null,"Welcome To React SSR!")}},{path:"/about",component:function(e){return r.createElement("div",null,"About us!")}},{path:"/contact",component:function(e){return r.createElement("div",null,"Contact")}}];t.a=i},function(e,t){e.exports=require("core-js/modules/es.array.iterator")},function(e,t){e.exports=require("core-js/modules/es.array.map")},function(e,t){e.exports=require("core-js/modules/es.string.iterator")},function(e,t){e.exports=require("core-js/modules/web.dom-collections.iterator")},function(e,t,n){"use strict";(function(e){var n,r;t.a=(n=e,r=console.log,function(e){return"development"===n.env.NODE_ENV&&r(e)})}).call(this,n(27))},function(e,t,n){"use strict";t.a=function(e){return e&&e.env&&e.env.PORT?e.env.PORT:3e3}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,u=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?u=c.concat(u):f=-1,u.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var t=u.length;t;){for(c=u,u=[];++f<t;)c&&c[f].run();f=-1,t=u.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new m(e,t)),1!==u.length||l||s(d)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=h,i.addListener=h,i.once=h,i.off=h,i.removeListener=h,i.removeAllListeners=h,i.emit=h,i.prependListener=h,i.prependOnceListener=h,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){e.exports=require("core-js/modules/es.regexp.exec")},function(e,t){e.exports=require("core-js/modules/es.symbol")},function(e,t){e.exports=require("core-js/modules/es.array.concat")},function(e,t){e.exports=require("core-js/modules/es.array.reduce")},function(e,t){e.exports=require("core-js/modules/es.date.to-string")},function(e,t){e.exports=require("core-js/modules/es.object.keys")},function(e,t){e.exports=require("core-js/modules/es.regexp.to-string")},function(e,t){e.exports=require("ramda")},function(e,t){e.exports=require("helmet")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("react-dom/server")},function(e,t){e.exports=require("react-router")},function(e,t){e.exports=require("react-helmet")},function(e,t,n){"use strict";n(7),n(8),n(10);var r,i=n(1),o=n(2),a=n(3),s=n(0),c=n(6),u=n(13);!function(e){e.Id="id",e.Name="name",e.Classification="classification",e.Designation="designation",e.AverageHeight="average_height",e.SkinColors="skin_colors",e.HairColors="hair_colors",e.EyeColors="eye_colors",e.AverageLifespan="average_lifespan",e.Homeworld="homeworld",e.Language="language",e.Url="url"}(r||(r={}));var l,f=n(14),p=n(11),d=n(15);!function(e){e.Id="id",e.Url="url",e.Name="name",e.Created="created",e.Edited="edited",e.Model="model",e.Manufacturer="manufacturer",e.CostInCredits="cost_in_credits",e.Length="length",e.MaxAtmospheringSpeed="max_atmosphering_speed",e.Crew="crew",e.Passengers="passengers",e.CargoCapacity="cargo_capacity",e.Consumables="consumables",e.HyperdriveRating="hyperdrive_rating",e.MGLT="MGLT",e.StarshipClass="starship_class"}(l||(l={}));var m,h=n(16),v=n(4),y={getById:m=Object(o.a)(Object(a.a)(s.a.People,[{tableName:s.a.Film,showFields:[c.a.Id,c.a.Title],fieldNameInResponse:"films",manyToManyTableName:s.b.Actors,intersectEntityOn:u.a.FilmId,where:u.a.PeopleId},{tableName:s.a.Specie,showFields:[r.Id,r.Name],fieldNameInResponse:"species",manyToManyTableName:s.c.Race,intersectEntityOn:f.a.SpecieId,where:f.a.PeopleId},{tableName:s.a.Vehicle,showFields:[p.a.Id,p.a.Name],fieldNameInResponse:"vehicles",manyToManyTableName:s.b.Pilot,intersectEntityOn:d.a.VehicleId,where:d.a.PeopleId},{tableName:s.a.Starship,showFields:[l.Id,l.Name],fieldNameInResponse:"starships",manyToManyTableName:s.b.StarshipPilot,intersectEntityOn:h.a.StarshipId,where:h.a.PeopleId}])),getAll:Object(v.a)(s.a.People,m)};function b(e,t,n,r,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function g(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){b(o,r,i,a,s,"next",e)}function s(e){b(o,r,i,a,s,"throw",e)}a(void 0)}))}}var w=Object(i.Router)();w.get("/:id",function(){var e=g(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:y.getById(t.params.id)().then((function(e){return n.json(e)}));case 1:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),w.get("/",function(){var e=g(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y.getAll();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());t.a=w},function(e,t,n){"use strict";n(7),n(8),n(10);var r,i=n(1),o=n(2),a=n(3),s=n(0),c=n(6);!function(e){e.Id="id",e.StarshipId="starship_id",e.FilmId="film_id"}(r||(r={}));var u,l=n(5),f=n(4),p=n(16),d={getById:u=Object(o.a)(Object(a.a)(s.a.Starship,[{tableName:s.a.Film,showFields:[c.a.Id,c.a.Title],fieldNameInResponse:"films",manyToManyTableName:s.b.StarshipsInFilms,intersectEntityOn:r.FilmId,where:r.StarshipId},{tableName:s.a.People,showFields:[l.a.Id,l.a.Name],fieldNameInResponse:"pilots",manyToManyTableName:s.b.StarshipPilot,intersectEntityOn:p.a.PeopleId,where:p.a.StarshipId}])),getAll:Object(f.a)(s.a.Starship,u)};function m(e,t,n,r,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function h(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){m(o,r,i,a,s,"next",e)}function s(e){m(o,r,i,a,s,"throw",e)}a(void 0)}))}}var v=Object(i.Router)();v.get("/:id",function(){var e=h(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,d.getById(t.params.id);case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),v.get("/",function(){var e=h(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,d.getAll();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());t.a=v},function(e,t,n){"use strict";n(7),n(8),n(10);var r,i,o=n(1),a=n(3),s=n(2),c=n(0),u=n(5);r||(r={}),function(e){e.Id="id",e.FilmId="film_id",e.SpecieId="specie_id"}(i||(i={}));var l,f=n(14),p=n(6),d=n(4),m={getById:l=Object(s.a)(Object(a.a)(c.a.Specie,[{tableName:c.a.Film,showFields:[p.a.Id,p.a.Title],fieldNameInResponse:"films",manyToManyTableName:c.b.SpeciesInFilms,intersectEntityOn:i.FilmId,where:i.SpecieId},{tableName:c.a.People,showFields:[u.a.Id,u.a.Name],fieldNameInResponse:"people",manyToManyTableName:c.c.Race,intersectEntityOn:f.a.PeopleId,where:f.a.SpecieId}])),getAll:Object(d.a)(c.a.Specie,l)};function h(e,t,n,r,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function v(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){h(o,r,i,a,s,"next",e)}function s(e){h(o,r,i,a,s,"throw",e)}a(void 0)}))}}var y=Object(o.Router)();y.get("/:id",function(){var e=v(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,m.getById(t.params.id)();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),y.get("/",function(){var e=v(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,m.getAll();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());t.a=y},function(e,t,n){"use strict";n(7),n(8),n(10);var r,i=n(1),o=n(2),a=n(0),s=n(3),c=n(11),u=n(12),l=n(5),f=n(13),p=n(4),d={getById:r=Object(o.a)(Object(s.a)(a.a.Film,[{tableName:a.a.Vehicle,showFields:[c.a.Id,c.a.Name],fieldNameInResponse:"vehicles",manyToManyTableName:a.b.VehiclesInFilms,intersectEntityOn:u.a.VehicleId,where:u.a.VehicleId},{tableName:a.a.People,showFields:[l.a.Id,l.a.Name],fieldNameInResponse:"actors",manyToManyTableName:a.b.Actors,intersectEntityOn:f.a.PeopleId,where:f.a.FilmId},{tableName:a.a.Starship,showFields:["id","name"],fieldNameInResponse:"vehicles",manyToManyTableName:a.b.StarshipsInFilms,intersectEntityOn:"starship_id",where:"film_id"},{tableName:a.a.Planet,showFields:["id","name"],fieldNameInResponse:"planets",manyToManyTableName:a.b.PlanetsInFilms,intersectEntityOn:"planet_id",where:"film_id"}])),getAll:Object(p.a)(a.a.Film,r)};function m(e,t,n,r,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function h(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){m(o,r,i,a,s,"next",e)}function s(e){m(o,r,i,a,s,"throw",e)}a(void 0)}))}}var v=Object(i.Router)();v.get("/insert",function(){var e=h(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),v.get("/:id",function(){var e=h(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,d.getById(t.params.id)();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),v.get("/",function(){var e=h(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,d.getAll();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());t.a=v},function(e,t,n){"use strict";n(32),n(7),n(28),n(34),n(67);var r=n(37),i=n(9),o=n.n(i),a=n(38),s=n(39),c=n(19),u=n(20),l=n(40).Helmet.renderStatic();t.a=function(e){return Object(r.readFileSync)("./public/index.html","utf8").replace("__APP__",function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(a.renderToString)(o.a.createElement(s.StaticRouter,{location:e.path,context:t},o.a.createElement("div",null,Object(c.renderRoutes)(u.a))))}(e)).replace("HELMET-META",l.meta.toString()).replace("HELMET-TITLE",l.title.toString()).replace("HELMET-BODY-ATTRIBUTES",l.bodyAttributes.toString())}},function(e,t,n){"use strict";n(7),n(8),n(10);var r,i=n(1),o=n(2),a=n(3),s=n(0),c=n(5),u=n(15),l=n(6),f=n(12),p=n(4),d={getById:r=Object(o.a)(Object(a.a)(s.a.Vehicle,[{tableName:s.a.People,showFields:[c.a.Id,c.a.Name],fieldNameInResponse:"pilots",manyToManyTableName:s.b.Pilot,intersectEntityOn:u.a.PeopleId,where:u.a.VehicleId},{tableName:s.a.Film,showFields:[l.a.Id,l.a.Title],fieldNameInResponse:"films",manyToManyTableName:s.b.VehiclesInFilms,intersectEntityOn:f.a.FilmId,where:f.a.VehicleId}])),getAll:Object(p.a)(s.a.Vehicle,r)};function m(e,t,n,r,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function h(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){m(o,r,i,a,s,"next",e)}function s(e){m(o,r,i,a,s,"throw",e)}a(void 0)}))}}var v=Object(i.Router)();v.get("/:id",function(){var e=h(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,d.getById(t.params.id)();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),v.get("/",function(){var e=h(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,d.getAll();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());t.a=v},function(e,t,n){"use strict";n(7),n(8),n(10);var r,i=n(1),o=n(2),a=n(3),s=n(0),c=n(4),u={getById:r=Object(o.a)(Object(a.a)(s.a.Planet,[{tableName:s.a.People,showFields:["id","name"],fieldNameInResponse:"residents",manyToManyTableName:s.b.Resident,intersectEntityOn:"people_id",where:"planet_id"},{tableName:s.a.Film,showFields:["id","title"],fieldNameInResponse:"films",manyToManyTableName:s.b.PlanetsInFilms,intersectEntityOn:"film_id",where:"planet_id"}])),getAll:Object(c.a)(s.a.Planet,r)};function l(e,t,n,r,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function f(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){l(o,r,i,a,s,"next",e)}function s(e){l(o,r,i,a,s,"throw",e)}a(void 0)}))}}var p=Object(i.Router)();p.get("/:id",function(){var e=f(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.getById(t.params.id)();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),p.get("/",function(){var e=f(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.getAll();case 2:r=e.sent,n.json(r);case 4:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());t.a=p},function(e,t,n){e.exports=n(49)},function(e,t,n){"use strict";n.r(t),function(e){n(21),n(22),n(7),n(8),n(28),n(23),n(50),n(24),n(10);var t=n(44),r=n(36),i=n.n(r),o=n(47),a=n(41),s=n(43),c=n(46),u=n(42),l=n(19),f=n(20),p=n(26),d=n(45),m=n(1)();m.use("/api/v1/films",t.a),m.use("/api/v1/planets",o.a),m.use("/api/v1/people",a.a),m.use("/api/v1/species",s.a),m.use("/api/v1/vehicles",c.a),m.use("/api/v1/starships",u.a),m.get("/*",(function(e,t,n){var r=Object(l.matchRoutes)(f.a,e.path).map((function(e){var t=e.route,n=e.match;return t.loadData?t.loadData(n):Promise.resolve(null)})).map((function(e){return e&&new Promise((function(t,n){return e.then(t).catch(t)}))}));r.length>0?Promise.all(r).then((function(){return t.send(Object(d.a)(e))})):n()})),m.use(i()()),m.listen(Object(p.a)(e),(function(){return console.log("server started on port ".concat(Object(p.a)(e)))}))}.call(this,n(27))},function(e,t){e.exports=require("core-js/modules/es.string.match")},function(e,t){e.exports=require("core-js/modules/es.symbol.description")},function(e,t){e.exports=require("core-js/modules/es.symbol.iterator")},function(e,t){e.exports=require("core-js/modules/es.array.from")},function(e,t){e.exports=require("core-js/modules/es.array.is-array")},function(e,t){e.exports=require("core-js/modules/es.array.some")},function(e,t){e.exports=require("core-js/modules/es.array.filter")},function(e,t){e.exports=require("core-js/modules/es.array.for-each")},function(e,t){e.exports=require("core-js/modules/es.object.define-properties")},function(e,t){e.exports=require("core-js/modules/es.object.define-property")},function(e,t){e.exports=require("core-js/modules/es.object.get-own-property-descriptor")},function(e,t){e.exports=require("core-js/modules/es.object.get-own-property-descriptors")},function(e,t){e.exports=require("core-js/modules/web.dom-collections.for-each")},function(e,t){e.exports=require("knex")},function(e,t,n){var r=n(65);e.exports={development:{client:"pg",connection:{user:r.user,host:r.host,database:"starwars",password:r.password,ssl:!0}}}},function(e,t){e.exports={host:"pg-starwars.postgres.database.azure.com",user:"ruben85@pg-starwars",password:"*ruben28340*"}},function(e,t){e.exports=require("core-js/modules/es.array.reduce-right")},function(e,t){e.exports=require("core-js/modules/es.string.replace")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3R5cGVzL1RhYmxlcy50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJleHByZXNzXCIiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3V0aWxzL21lbW9pemUudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL0RCL2dldEJ5SWQudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL0RCL2dldEFsbC50cyIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvdHlwZXMvaW50ZXJmYWNlcy9QZW9wbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3R5cGVzL2ludGVyZmFjZXMvRmlsbS50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZ1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3RcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIiIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvdHlwZXMvaW50ZXJmYWNlcy9WZWhpY2xlLnRzIiwid2VicGFjazovLy8uL3NlcnZlci90eXBlcy9pbnRlcmZhY2VzL1ZlaGljbGVzSW5GaWxtcy50cyIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvdHlwZXMvaW50ZXJmYWNlcy9BY3RvcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3R5cGVzL2ludGVyZmFjZXMvUmFjZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3R5cGVzL2ludGVyZmFjZXMvUGlsb3QudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3R5cGVzL2ludGVyZmFjZXMvU3RhcnNoaXBQaWxvdC50cyIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvREIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3V0aWxzL2FzeW5jQ29tcG9zZS50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdC1yb3V0ZXItY29uZmlnXCIiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3JvdXRlcy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3BhZ2VzL0hvbWUudHN4Iiwid2VicGFjazovLy8uL2NsaWVudC9wYWdlcy9BYm91dC50c3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3BhZ2VzL0NvbnRhY3QudHN4Iiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvclwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXBcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3JcIiIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvdXRpbHMvbG9nZ2VyLnRzIiwid2VicGFjazovLy8uL3NlcnZlci91dGlscy9wb3J0LWdldHRlci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlY1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2xcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZVwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZ1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5c1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmFtZGFcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJoZWxtZXRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0LWRvbS9zZXJ2ZXJcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdC1yb3V0ZXJcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdC1oZWxtZXRcIiIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvdHlwZXMvaW50ZXJmYWNlcy9TcGVjaWUudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3R5cGVzL2ludGVyZmFjZXMvU3RhcnNoaXAudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL2NvbnRyb2xsZXJzL3Blb3BsZS50cyIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvcm91dGVzL3Blb3BsZS50cyIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvdHlwZXMvaW50ZXJmYWNlcy9TdGFyc2hpcHNJbkZpbG1zLnRzIiwid2VicGFjazovLy8uL3NlcnZlci9jb250cm9sbGVycy9zdGFyc2hpcC50cyIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvcm91dGVzL3N0YXJzaGlwLnRzIiwid2VicGFjazovLy8uL3NlcnZlci90eXBlcy9pbnRlcmZhY2VzL1NwZWNpZXNJbkZpbG1zLnRzIiwid2VicGFjazovLy8uL3NlcnZlci9jb250cm9sbGVycy9zcGVjaWUudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3JvdXRlcy9zcGVjaWVzLnRzIiwid2VicGFjazovLy8uL3NlcnZlci9jb250cm9sbGVycy9maWxtLnRzIiwid2VicGFjazovLy8uL3NlcnZlci9yb3V0ZXMvZmlsbS50cyIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvdXRpbHMvcmVuZGVyUmVhY3RBcHAudHN4Iiwid2VicGFjazovLy8uL3NlcnZlci91dGlscy9BcHBSZW5kZXJlZFRvU3RyaW5nLnRzeCIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvY29udHJvbGxlcnMvdmVoaWNsZS50cyIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvcm91dGVzL3ZlaGljbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL2NvbnRyb2xsZXJzL3BsYW5ldC50cyIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvcm91dGVzL3BsYW5ldHMudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL2luZGV4LnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2hcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvclwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWVcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImtuZXhcIiIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIva25leGZpbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL3NldHRpbmdzLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2VcIiJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlRhYmxlIiwiTWFueVRvTWFueVRhYmxlIiwiT25lVG9NYW55VGFibGUiLCJFbnRpdHlUYWJsZSIsInJlcXVpcmUiLCJhc3luY01lbW9pemUiLCJmbiIsInN0YXRlIiwiYXJncyIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJjb25jYXQiLCJrZXlzIiwic29tZSIsImsiLCJMb2ciLCJnZXRCeUlkUXVlcnkiLCJ0YWJsZU5hbWUiLCJmb3JlaWduRmllbGRzIiwiaWQiLCJhc3luY0NvbXBvc2UiLCJtYXBEQlJlc3BvbnNlIiwicmVzIiwicm93cyIsImpzb25fYnVpbGRfb2JqZWN0IiwiZmV0Y2hFbnRpdHlXaXRoTWFueVRvTWFueUZpZWxkcyIsImdldE1NRmllbGRzUXVlcnlGcm9tIiwiUHJvbWlzZSIsInJlc29sdmUiLCJtYW55VG9NYW55RmllbGRzIiwicmVzdWx0IiwiaW5kZXgiLCJ1bmRlZmluZWQiLCJmaWVsZE5hbWVJblJlc3BvbnNlIiwiZ2V0TU1GaWVsZEJ5SWQiLCJrbmV4IiwicmF3Iiwid3JhcCIsImJ1aWxkTU1GUXVlcnkiLCJjb21wb3NlIiwiZmllbGREYXRhIiwid2hlcmUiLCJmaWVsZE5hbWUiLCJxdWVyeSIsInNob3dGaWVsZHMiLCJtYW55VG9NYW55VGFibGVOYW1lIiwiaW50ZXJzZWN0RW50aXR5T24iLCJmaWVsZCIsImZpZWxkcyIsIm1hcCIsImdldElkcyIsInNlbGVjdCIsImZyb20iLCJtYXBQcm9taXNlc1RvUmVzdWx0IiwicHJvbWlzZXMiLCJhbGwiLCJnZXRBbGwiLCJ0YWJsZSIsImNvbmZpZ3VyZWRHZXRCeUlkSGFuZGxlciIsImdldEJ5SWRIYW5kbGVyIiwiaWRzIiwiSVBlb3BsZUVudGl0eUZpZWxkcyIsIkZpbG1GaWVsZHNOYW1lcyIsIkZpbG1GaWVsZHMiLCJWZWhpY2xlRmllbGRzTmFtZXMiLCJWZWhpY2xlc0luRmlsbXNGaWVsZHNOYW1lcyIsIklBY3RvcnNGaWVsZHNOYW1lcyIsIlJhY2VGaWVsZHMiLCJQaWxvdEZpZWxkTmFtZXMiLCJQaWxvdEZpZWxkVHlwZXMiLCJTdGFyc2hpcFBpbG90RmllbGRzTmFtZXMiLCJTdGFyc2hpcFBpbG90RmllbGRzIiwiZGV2ZWxvcG1lbnQiLCJmbnMiLCJkYXRhIiwicmVkdWNlUmlnaHQiLCJmIiwidGhlbiIsInYiLCJlIiwiY29uc29sZSIsImxvZyIsInJvdXRlcyIsInBhdGgiLCJjb21wb25lbnQiLCJwcm9wcyIsImxvZ0ZuIiwibG9nZ2VyIiwicHJvY2VzcyIsIm1lc3NhZ2UiLCJlbnYiLCJOT0RFX0VOViIsImdldFBvcnQiLCJQT1JUIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsInRoaXMiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImxlbmd0aCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJwdXNoIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJJU3BlY2llRW50aXR5RmllbGRzIiwiU3RhcnNoaXBFbnRpdHlGaWVsZHMiLCJfZ2V0QnlJZCIsImdldEJ5SWQiLCJNZW0iLCJQZW9wbGUiLCJGaWxtIiwiSWQiLCJUaXRsZSIsIkFjdG9ycyIsIkZpbG1JZCIsIlBlb3BsZUlkIiwiU3BlY2llIiwiTmFtZSIsIlJhY2UiLCJTcGVjaWVJZCIsIlZlaGljbGUiLCJQaWxvdCIsIlZlaGljbGVJZCIsIlN0YXJzaGlwIiwiU3RhcnNoaXBQaWxvdCIsIlN0YXJzaGlwSWQiLCJSIiwiUm91dGVyIiwicmVxIiwicGFyYW1zIiwianNvbiIsIlN0YXJzaGlwc0luRmlsbXNGaWVsZHMiLCJTdGFyc2hpcHNJbkZpbG1zIiwiU3BlY2llc0luRmlsbXNGaWVsZHNOYW1lIiwiU3BlY2llc0luRmlsbXNGaWVsZHNUeXBlIiwiU3BlY2llc0luRmlsbXMiLCJWZWhpY2xlc0luRmlsbXMiLCJQbGFuZXQiLCJQbGFuZXRzSW5GaWxtcyIsImhlbG1ldCIsIkhlbG1ldCIsInJlbmRlclN0YXRpYyIsInJlbmRlclJlYWN0QXBwIiwicmVhZEZpbGVTeW5jIiwicmVwbGFjZSIsImNvbnRleHQiLCJyZW5kZXJUb1N0cmluZyIsImxvY2F0aW9uIiwicmVuZGVyUm91dGVzIiwiQXBwUmVuZGVyZWRUb1N0cmluZyIsIm1ldGEiLCJ0b1N0cmluZyIsImJvZHlBdHRyaWJ1dGVzIiwiUmVzaWRlbnQiLCJwbGFuZXQiLCJhcHAiLCJ1c2UiLCJmaWxtIiwicGVvcGxlIiwic3BlY2llIiwidmVoaWNsZSIsInN0YXJzaGlwIiwibmV4dCIsIm1hdGNoUm91dGVzIiwiUm91dGVzIiwicm91dGUiLCJtYXRjaCIsImxvYWREYXRhIiwicHJvbWlzZSIsInJlamVjdCIsInNlbmQiLCJsaXN0ZW4iLCJjbGllbnQiLCJjb25uZWN0aW9uIiwidXNlciIsImhvc3QiLCJkYXRhYmFzZSIsInBhc3N3b3JkIiwic3NsIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxF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QyxRQUFRLGlELGNDQXpCckMsRUFBT0QsUUFBVXNDLFFBQVEsUyxnQkNDekIsSUFBTUwsRUFBSUssRUFBUSxJQUNsQnJDLEVBQU9ELFFBQVUsQ0FFZjJHLFlBQWEsQ0FDWDRJLE9BQVEsS0FDUkMsV0FBWSxDQUNWQyxLQUFNeE4sRUFBRXdOLEtBQ1JDLEtBQU16TixFQUFFeU4sS0FDUkMsU0FBVSxXQUNWQyxTQUFVM04sRUFBRTJOLFNBQ1pDLEtBQUssTSxjQ1ZYNVAsRUFBT0QsUUFBVSxDQUNmMFAsS0FBTSwwQ0FDTkQsS0FBTSxzQkFDTkcsU0FBVSxpQixjQ0paM1AsRUFBT0QsUUFBVXNDLFFBQVEsMEMsY0NBekJyQyxFQUFPRCxRQUFVc0MsUUFBUSIsImZpbGUiOiJzZXJ2ZXJfYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvYnVpbGRcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQ4KTtcbiIsImV4cG9ydCBlbnVtIFRhYmxle1xyXG4gIEFjdG9ycyA9ICdhY3RvcnMnLFxyXG4gIEZpbG0gPSAnZmlsbScsXHJcbiAgUGVvcGxlID0gJ3Blb3BsZScsXHJcbiAgUGlsb3QgPSAncGlsb3QnLFxyXG4gIFBsYW5ldCA9ICdwbGFuZXQnLFxyXG4gIFBsYW5ldHNJbkZpbG1zID0gJ3BsYW5ldHNfaW5fZmlsbXMnLFxyXG4gIFNwZWNpZSA9ICdzcGVjaWUnLFxyXG4gIFN0YXJzaGlwID0gJ3N0YXJzaGlwJyxcclxuICBWZWhpY2xlID0gJ3ZlaGljbGUnLFxyXG4gIFZlaGljbGVzSW5GaWxtcyA9ICd2ZWhpY2xlc19pbl9maWxtcycsXHJcbiAgU3RhcnNoaXBzSW5GaWxtcyA9ICdzdGFyc2hpcHNfaW5fZmlsbXMnLFxyXG4gIFNwZWNpZXNJbkZpbG1zID0gJ3NwZWNpZXNfaW5fZmlsbXMnLFxyXG4gIFJhY2UgPSAncmFjZScsXHJcbiAgU3RhcnNoaXBQaWxvdCA9ICdzdGFyc2hpcF9waWxvdCdcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE1hbnlUb01hbnlUYWJsZXtcclxuICBBY3RvcnMgPSAnYWN0b3JzJyxcclxuICBWZWhpY2xlc0luRmlsbXMgPSAndmVoaWNsZXNfaW5fZmlsbXMnLFxyXG4gIFN0YXJzaGlwc0luRmlsbXMgPSAnc3RhcnNoaXBzX2luX2ZpbG1zJyxcclxuICBTcGVjaWVzSW5GaWxtcyA9ICdzcGVjaWVzX2luX2ZpbG1zJyxcclxuICBQbGFuZXRzSW5GaWxtcyA9ICdwbGFuZXRzX2luX2ZpbG1zJyxcclxuICBSZXNpZGVudCA9ICdyZXNpZGVudCcsXHJcbiAgUGlsb3QgPSAncGlsb3QnLFxyXG4gIFN0YXJzaGlwUGlsb3QgPSAnc3RhcnNoaXBfcGlsb3QnXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE9uZVRvTWFueVRhYmxle1xyXG4gIFJhY2UgPSAncmFjZScsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEVudGl0eVRhYmxle1xyXG4gIEZpbG0gPSAnZmlsbScsXHJcbiAgUGVvcGxlID0gJ3Blb3BsZScsXHJcbiAgUGxhbmV0ID0gJ3BsYW5ldCcsXHJcbiAgU3BlY2llID0gJ3NwZWNpZScsXHJcbiAgU3RhcnNoaXAgPSAnc3RhcnNoaXAnLFxyXG4gIFZlaGljbGUgPSAndmVoaWNsZScsXHJcbiAgVGVzdCAgICA9ICd0ZXN0J1xyXG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTsiLCJpbXBvcnQgeyBQcm9jZXNzRW52T3B0aW9ucyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xyXG5pbXBvcnQgTG9nIGZyb20gJy4vbG9nZ2VyJzsgXHJcbmV4cG9ydCBjb25zdCBtZW1vaXplOiAoZjogRnVuY3Rpb24pID0+IChhOiBhbnkpID0+IGFueSA9IChmbikgPT4ge1xyXG4gIGxldCBzdGF0ZSA9IHt9IGFzIGFueTtcclxuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJnczogYW55KSB7XHJcbiAgICBjb25zdCBrZXk6IHN0cmluZyA9IFsuLi5hcmdzXS5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjLmNvbmNhdChjdXJyKSwgJycpO1xyXG4gICAgaWYgKE9iamVjdC5rZXlzKHN0YXRlKS5zb21lKChrOiBzdHJpbmcpID0+IGsgPT09IGtleSkpIHtcclxuICAgICAgcmV0dXJuICgpID0+IHN0YXRlW2tleV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdGF0ZVtrZXldID0gZm4oLi4uYXJncyk7XHJcbiAgICAgIHJldHVybiAoKSA9PiBzdGF0ZVtrZXldO1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgYXN5bmNNZW1vaXplOiAoZjogKGE6IGFueSkgPT4gUHJvbWlzZTxhbnk+KSA9PiAoYTogYW55KSA9PiAoKSA9PiBQcm9taXNlPGFueT4gPSAoZm4pID0+IHtcclxuICBsZXQgc3RhdGUgPSB7fSBhcyBhbnk7XHJcbiAgcmV0dXJuIChhcmdzOiBhbnkpID0+IHtcclxuICAgIGNvbnN0IGtleTogc3RyaW5nID0gWy4uLmFyZ3NdLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MuY29uY2F0KGN1cnIpLCAnJyk7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoc3RhdGUpLnNvbWUoKGs6IHN0cmluZykgPT4gayA9PT0ga2V5KSkge1xyXG4gICAgICBMb2coJ01lbW9pemU6IERhdGEgZXh0cmFjdGVkIEZyb20gQ2FjaGUnKTtcclxuICAgICAgcmV0dXJuICgpID0+IHN0YXRlW2tleV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBMb2coJ01lbW9pemU6IGRhdGEgZXh0cmFjdGVkIEZyb20gREInKTtcclxuICAgICAgc3RhdGVba2V5XSA9IGZuKGFyZ3MpO1xyXG4gICAgICByZXR1cm4gKCkgPT4gc3RhdGVba2V5XTtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuIiwiaW1wb3J0IHsgTWFueVRvTWFueVRhYmxlLCBFbnRpdHlUYWJsZSwgT25lVG9NYW55VGFibGUgfSBmcm9tICcuLi90eXBlcy9UYWJsZXMnO1xyXG5pbXBvcnQgeyBrbmV4IH0gZnJvbSAnLi9pbmRleCc7XHJcbmltcG9ydCB7IElQb3N0Z3Jlc0pzb25CdWlsZE9iamVjdCB9IGZyb20gJy4uL3R5cGVzL0RCJztcclxuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ3JhbWRhJztcclxuaW1wb3J0IHsgYXN5bmNDb21wb3NlIH0gZnJvbSAnLi4vdXRpbHMvYXN5bmNDb21wb3NlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1NRmllbGRzRGF0YSBleHRlbmRzIElGaWVsZHNEYXRhLCBJU2hvd0ZpZWxkcyB7IH07XHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1NRmllbGRzRGF0YVdpdGhGaWVsZHNUcmFuc2Zvcm1lZCBleHRlbmRzIElGaWVsZHNEYXRhLCBJU2hvd0ZpZWxkc1RyYW5zZm9ybWVkIHsgfTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNob3dGaWVsZHMge1xyXG4gIHNob3dGaWVsZHM6IHN0cmluZ1tdXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBJU2hvd0ZpZWxkc1RyYW5zZm9ybWVkIHtcclxuICBzaG93RmllbGRzOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRmllbGRzRGF0YSB7XHJcbiAgdGFibGVOYW1lOiBFbnRpdHlUYWJsZSxcclxuICBmaWVsZE5hbWVJblJlc3BvbnNlOiBzdHJpbmcsXHJcbiAgbWFueVRvTWFueVRhYmxlTmFtZTogTWFueVRvTWFueVRhYmxlIHwgT25lVG9NYW55VGFibGUsXHJcbiAgaW50ZXJzZWN0RW50aXR5T246IHN0cmluZyxcclxuICB3aGVyZTogc3RyaW5nXHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRmllbGRXaXRoUXVlcnkge1xyXG4gIGZpZWxkTmFtZTogc3RyaW5nLFxyXG4gIHF1ZXJ5OiBzdHJpbmdcclxufVxyXG5cclxuXHJcblxyXG5cclxuaW50ZXJmYWNlIElPbmVUb01hbnkge1xyXG4gIHRhYmxlTmFtZTogRW50aXR5VGFibGUsXHJcbiAgc2hvd0ZpZWxkczogc3RyaW5nW10sXHJcbiAgZmllbGROYW1lSW5SZXNwb25zZTogc3RyaW5nLFxyXG4gIHdoZXJlOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ5SWRRdWVyeTxULCBCPihcclxuICB0YWJsZU5hbWU6IFQsXHJcbiAgZm9yZWlnbkZpZWxkcz86IElNTUZpZWxkc0RhdGFbXSB8IHVuZGVmaW5lZCxcclxuKSB7XHJcbiAgcmV0dXJuIGFzeW5jIChpZDogc3RyaW5nKSA9PlxyXG4gICAgYXdhaXQgYXN5bmNDb21wb3NlKFxyXG4gICAgICBtYXBEQlJlc3BvbnNlPEI+KGZvcmVpZ25GaWVsZHMpLFxyXG5cclxuICAgICAgKHJlczogSVBvc3RncmVzSnNvbkJ1aWxkT2JqZWN0KSA9PiByZXMucm93c1swXS5qc29uX2J1aWxkX29iamVjdCxcclxuXHJcbiAgICAgIGZldGNoRW50aXR5V2l0aE1hbnlUb01hbnlGaWVsZHM8VD4odGFibGVOYW1lLCBpZCksXHJcblxyXG4gICAgICBnZXRNTUZpZWxkc1F1ZXJ5RnJvbVxyXG5cclxuICAgICkoUHJvbWlzZS5yZXNvbHZlKGZvcmVpZ25GaWVsZHMpKVxyXG5cclxufVxyXG5cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gbWFwREJSZXNwb25zZTxUPihtYW55VG9NYW55RmllbGRzOiBJTU1GaWVsZHNEYXRhW10gfCB1bmRlZmluZWQpe1xyXG4gIHJldHVybiAocmVzdWx0OiBhbnkpID0+XHJcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpXHJcbiAgICAgIC5yZWR1Y2UoKGFjYzogYW55LCBjdXJyOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBUID0+XHJcbiAgICAgICAgaW5kZXggPT09IDBcclxuICAgICAgICAgID8geyAuLi5yZXN1bHRbY3Vycl0gfVxyXG4gICAgICAgICAgOiB7XHJcbiAgICAgICAgICAgIC4uLmFjYywgW1xyXG4gICAgICAgICAgICAgIG1hbnlUb01hbnlGaWVsZHMgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgPyBtYW55VG9NYW55RmllbGRzW2luZGV4IC0gMV0uZmllbGROYW1lSW5SZXNwb25zZSA6IGN1cnJcclxuICAgICAgICAgICAgXTogcmVzdWx0W2N1cnJdXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgLCB7fSlcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZldGNoRW50aXR5V2l0aE1hbnlUb01hbnlGaWVsZHM8VD4odGFibGVOYW1lOiBULCBpZDogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIChnZXRNTUZpZWxkQnlJZDogKHc6c3RyaW5nKT0+SUZpZWxkV2l0aFF1ZXJ5KSA9PlxyXG4gICAga25leFxyXG4gICAgICAucmF3KFxyXG4gICAgICAgIGAnJHt0YWJsZU5hbWV9JywgKCBTRUxFQ1QgdG9fanNvbihyb3cpXHJcbiAgICAgICBGUk9NICggU0VMRUNUICogRlJPTSAke3RhYmxlTmFtZX0gV0hFUkUgaWQgPSA6aWQgKSBcclxuICAgICAgIHJvdyBcclxuICAgICAgICksXHJcbiAgICR7Z2V0TU1GaWVsZEJ5SWQoaWQpfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gYCxcclxuICAgICAgICB7IGlkIH1cclxuICAgICAgKVxyXG4gICAgICAud3JhcCgnU0VMRUNUIGpzb25fYnVpbGRfb2JqZWN0KCcsICcpJyk7XHJcbn1cclxuXHJcblxyXG5jb25zdCBtYW55VG9NYW55UXVlcnk6IElNTVF1ZXJ5RnVuY3Rpb24gPSAoZmllbGREYXRhKSA9PiAod2hlcmUpID0+ICh7XHJcbiAgZmllbGROYW1lOiBmaWVsZERhdGEudGFibGVOYW1lLFxyXG4gIHF1ZXJ5OiBgXHJcbiAgKCBTRUxFQ1QganNvbl9hZ2cocmVzdWx0KSBcclxuICAgIEZST00gKCBTRUxFQ1QgJHtmaWVsZERhdGEuc2hvd0ZpZWxkc30gRlJPTSAke2ZpZWxkRGF0YS50YWJsZU5hbWV9IFxyXG4gICAgSU5ORVIgSk9JTiAkeyBmaWVsZERhdGEubWFueVRvTWFueVRhYmxlTmFtZX0gT04gKCAke2ZpZWxkRGF0YS50YWJsZU5hbWV9LmlkID0gJHtmaWVsZERhdGEubWFueVRvTWFueVRhYmxlTmFtZX0uJHtmaWVsZERhdGEuaW50ZXJzZWN0RW50aXR5T259KVxyXG4gICAgV0hFUkUgJHtmaWVsZERhdGEubWFueVRvTWFueVRhYmxlTmFtZX0uJHtmaWVsZERhdGEud2hlcmV9ID0gJyR7d2hlcmV9JykgXHJcbiAgICByZXN1bHQgXHJcbiAgKVxyXG5gfSlcclxudHlwZSBJQ29uY2F0RmllbGRzRnVuY3Rpb24gPSAoZmllbGRzOiBJTU1GaWVsZHNEYXRhKSA9PiBJTU1GaWVsZHNEYXRhV2l0aEZpZWxkc1RyYW5zZm9ybWVkO1xyXG50eXBlIElNTVF1ZXJ5RnVuY3Rpb24gPSAoZjogSU1NRmllbGRzRGF0YVdpdGhGaWVsZHNUcmFuc2Zvcm1lZCkgPT4gKHc6IHN0cmluZykgPT4gSUZpZWxkV2l0aFF1ZXJ5XHJcblxyXG5jb25zdCBjb25jYXRGaWVsZHNXaXRoVGFibGVOYW1lOiBJQ29uY2F0RmllbGRzRnVuY3Rpb24gPSAoZmllbGQpID0+ICh7XHJcbiAgLi4uZmllbGQsXHJcbiAgc2hvd0ZpZWxkczogZmllbGQuc2hvd0ZpZWxkc1xyXG4gICAgLnJlZHVjZSgoYWNjLCBjdXJyLCBpbmRleCkgPT5cclxuICAgICAgaW5kZXggPD0gMFxyXG4gICAgICAgID8gYCR7ZmllbGQudGFibGVOYW1lfS4ke2N1cnJ9YFxyXG4gICAgICAgIDogYWNjICsgYCwgJHtmaWVsZC50YWJsZU5hbWV9LiR7Y3Vycn1gXHJcblxyXG4gICAgICAsIFwiXCIpXHJcbn0pXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGJ1aWxkTU1GUXVlcnk6ICgoZjogSU1NRmllbGRzRGF0YSkgPT4gKHc6IHN0cmluZykgPT4gSUZpZWxkV2l0aFF1ZXJ5KSA9XHJcbiAgY29tcG9zZTxJTU1GaWVsZHNEYXRhLCBJTU1GaWVsZHNEYXRhV2l0aEZpZWxkc1RyYW5zZm9ybWVkLCAodzogc3RyaW5nKSA9PiBJRmllbGRXaXRoUXVlcnk+KFxyXG4gICAgbWFueVRvTWFueVF1ZXJ5LFxyXG4gICAgY29uY2F0RmllbGRzV2l0aFRhYmxlTmFtZVxyXG4gICk7XHJcblxyXG5jb25zdCBnZXRNTUZpZWxkc1F1ZXJ5RnJvbSA9IChmaWVsZHM6IElNTUZpZWxkc0RhdGFbXSB8IHVuZGVmaW5lZCkgPT4gKGlkOiBzdHJpbmcpID0+XHJcbiAgZmllbGRzICE9PSB1bmRlZmluZWRcclxuICAgID8gZmllbGRzXHJcbiAgICAgIC5tYXAoYnVpbGRNTUZRdWVyeSlcclxuICAgICAgLnJlZHVjZSgoYWNjOiBzdHJpbmcsIGN1cnI6ICgoaWQ6IHN0cmluZykgPT4gSUZpZWxkV2l0aFF1ZXJ5KSkgPT5cclxuICAgICAgICBhY2MgIT09IFwiXCJcclxuICAgICAgICAgID8gKGAke2FjY30sICcke2N1cnIoaWQpLmZpZWxkTmFtZX0nLCAke2N1cnIoaWQpLnF1ZXJ5fWApXHJcbiAgICAgICAgICA6IChgJyR7Y3VycihpZCkuZmllbGROYW1lfScsICR7Y3VycihpZCkucXVlcnl9YClcclxuICAgICAgICAsIFwiXCIpXHJcbiAgICA6IFwiXCI7IiwiaW1wb3J0IHsgRW50aXR5VGFibGUgfSBmcm9tIFwiLi4vdHlwZXMvVGFibGVzXCI7XHJcbmltcG9ydCB7IGtuZXggfSBmcm9tIFwiLlwiO1xyXG5pbXBvcnQgeyBhc3luY0NvbXBvc2UgfSBmcm9tIFwiLi4vdXRpbHMvYXN5bmNDb21wb3NlXCI7XHJcblxyXG50eXBlIEdldEJ5SWRIYW5kbGVyID0gKGE6IGFueSkgPT4gKCkgPT4gUHJvbWlzZTxhbnk+XHJcblxyXG5jb25zdCBnZXRJZHMgPSAodGFibGVOYW1lOiBFbnRpdHlUYWJsZSk6IFByb21pc2U8eyBpZDogc3RyaW5nIH1bXT4gPT4ga25leC5zZWxlY3QoJ2lkJykuZnJvbSh0YWJsZU5hbWUpO1xyXG5cclxuY29uc3QgX2dldEFsbCA9IChnZXRCeUlkSGFuZGxlcjogR2V0QnlJZEhhbmRsZXIpID0+XHJcbiAgKGlkczogeyBpZDogc3RyaW5nIH1bXSk6IFByb21pc2U8YW55W10+W10gPT4gaWRzLm1hcChvID0+IGdldEJ5SWRIYW5kbGVyKG8uaWQpKCkpXHJcblxyXG5jb25zdCBtYXBQcm9taXNlc1RvUmVzdWx0ID0gKHByb21pc2VzOiBQcm9taXNlPGFueVtdPltdKTogUHJvbWlzZTxhbnlbXT4gPT4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRBbGwgPSAodGFibGU6IEVudGl0eVRhYmxlLCBjb25maWd1cmVkR2V0QnlJZEhhbmRsZXI6IEdldEJ5SWRIYW5kbGVyKSA9PiAoKSA9PlxyXG4gIGFzeW5jQ29tcG9zZShcclxuICAgIG1hcFByb21pc2VzVG9SZXN1bHQsXHJcbiAgICBfZ2V0QWxsKGNvbmZpZ3VyZWRHZXRCeUlkSGFuZGxlciksXHJcbiAgICBnZXRJZHNcclxuICApKFByb21pc2UucmVzb2x2ZSh0YWJsZSkpXHJcblxyXG5cclxuIiwiaW1wb3J0IHsgSVNwZWNpZUVudGl0eSBhcyBTcGVjaWUgfSBmcm9tICcuL1NwZWNpZSc7XHJcbmltcG9ydCB7IElTdWJqZWN0LCBJU3ViamVjdEZyb21BcGkgfSBmcm9tICcuL1N1YmplY3QnO1xyXG5pbXBvcnQgeyBJRnJvbUZvcmVpZ25UYWJsZXMgfSBmcm9tICcuL0Zyb21Gb3JlaWduVGFibGVzJztcclxuXHJcbmludGVyZmFjZSBJUGVvcGxlIGV4dGVuZHMgSVN1YmplY3R7XHJcbiAgaGVpZ2h0OiBzdHJpbmdcclxuICBtYXNzOiBzdHJpbmdcclxuICBoYWlyX2NvbG9yOiBzdHJpbmdcclxuICBza2luX2NvbG9yOiBzdHJpbmdcclxuICBleWVfY29sb3I6IHN0cmluZ1xyXG4gIGJpcnRoX3llYXI6IHN0cmluZ1xyXG4gIGdlbmRlcjogc3RyaW5nXHJcbiAgY3JlYXRlZDogc3RyaW5nXHJcbiAgZWRpdGVkOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGVvcGxlRW50aXR5IGV4dGVuZHMgSVBlb3BsZXtcclxuICBzcGVjaWVzOiBJRnJvbUZvcmVpZ25UYWJsZXNcclxuICB2ZWhpY2xlczogSUZyb21Gb3JlaWduVGFibGVzW11cclxuICBzdGFyc2hpcHM6IElGcm9tRm9yZWlnblRhYmxlc1tdXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBlb3BsZUZyb21BcGkgZXh0ZW5kcyBJUGVvcGxle1xyXG4gIHNwZWNpZXM6IHN0cmluZ1xyXG4gIHZlaGljbGVzOiBzdHJpbmdbXVxyXG4gIHN0YXJzaGlwczogc3RyaW5nW11cclxufVxyXG5cclxuZXhwb3J0IGVudW0gSVBlb3BsZUVudGl0eUZpZWxkc3tcclxuICBJZCA9ICdpZCcsXHJcbiAgTmFtZSA9ICduYW1lJyxcclxuICBIZWlnaHQgPSAnaGVpZ2h0JyxcclxuICBNYXNzID0gJ21hc3MnLFxyXG4gIEhhaXJDb2xvciA9ICdoYWlyX2NvbG9yJyxcclxuICBTa2luQ29sb3IgPSAnc2tpbl9jb2xvcicsXHJcbiAgRXllQ29sb3IgPSAnZXllX2NvbG9yJyxcclxuICBCaXJ0aFllYXIgPSAnYmlydGhfeWVhcicsXHJcbiAgR2VuZGVyID0gJ2dlbmRlcicsXHJcbiAgQ3JlYXRlZCA9ICdjcmVhdGVkJyxcclxuICBFZGl0ZWQgPSAnZWRpdGVkJyxcclxuICBVcmwgPSAndXJsJ1xyXG59IiwiaW1wb3J0IHtJRnJvbUZvcmVpZ25UYWJsZXN9IGZyb20gJy4vRnJvbUZvcmVpZ25UYWJsZXMnO1xyXG4gZXhwb3J0IGludGVyZmFjZSBJRmlsbUZyb21BcGl7XHJcbiAgdGl0bGU6ICAgICAgICAgIHN0cmluZ1xyXG4gIGVwaXNvZGVfaWQ6ICAgICBudW1iZXJcclxuICBvcGVuaW5nX2NyYXdsOiAgc3RyaW5nXHJcbiAgZGlyZWN0b3I6ICAgICAgIHN0cmluZ1xyXG4gIHByb2R1Y2VyOiAgICAgICBzdHJpbmdcclxuICByZWxlYXNlX2RhdGU6ICAgc3RyaW5nXHJcbiAgY2hhcmFjdGVyczogICAgIHN0cmluZ1tdXHJcbiAgcGxhbmV0czogICAgICAgIHN0cmluZ1tdXHJcbiAgc3RhcnNoaXBzOiAgICAgIHN0cmluZ1tdXHJcbiAgdmVoaWNsZXM6ICAgICAgIHN0cmluZ1tdXHJcbiAgc3BlY2llczogICAgICAgIHN0cmluZ1tdXHJcbiAgY3JlYXRlZDogICAgICAgIHN0cmluZ1xyXG4gIGVkaXRlZDogICAgICAgICBzdHJpbmdcclxuICB1cmw6ICAgICAgICAgICAgc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgRmlsbUZpZWxkcyB7XHJcbiAgZXhwb3J0IHR5cGUgaWQgPSBzdHJpbmc7XHJcbiAgZXhwb3J0IHR5cGUgdGl0bGUgPSBzdHJpbmcgfCBudWxsO1xyXG4gIGV4cG9ydCB0eXBlIGVwaXNvZGVfaWQgPSBudW1iZXIgfCBudWxsO1xyXG4gIGV4cG9ydCB0eXBlIG9wZW5pbmdfY3Jhd2wgPSBzdHJpbmcgfCBudWxsO1xyXG4gIGV4cG9ydCB0eXBlIGRpcmVjdG9yID0gc3RyaW5nIHwgbnVsbDtcclxuICBleHBvcnQgdHlwZSBwcm9kdWNlciA9IHN0cmluZyB8IG51bGw7XHJcbiAgZXhwb3J0IHR5cGUgcmVsZWFzZV9kYXRlID0gc3RyaW5nIHwgbnVsbDtcclxuICBleHBvcnQgdHlwZSBjcmVhdGVkID0gc3RyaW5nIHwgbnVsbDtcclxuICBleHBvcnQgdHlwZSBlZGl0ZWQgPSBzdHJpbmcgfCBudWxsO1xyXG4gIGV4cG9ydCB0eXBlIHVybCA9IHN0cmluZyB8IG51bGw7XHJcbiAgXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZW51bSBGaWxtRmllbGRzTmFtZXN7XHJcbiAgSWQgPSAnaWQnLFxyXG4gIFRpdGxlID0gJ3RpdGxlJyxcclxuICBFcGlzb2RlSWQgPSAgJ2VwaXNvZGVfaWQnLFxyXG4gIE9wZW5pbmdDcmF3bCA9ICdvcGVuaW5nX2NyYXdsJyxcclxuICBEaXJlY3RvciA9ICdkaXJlY3RvcicsXHJcbiAgUHJvZHVjZXIgPSAgJ3Byb2R1Y2VyJyxcclxuICBSZWxlYXNlRGF0ZSA9ICAncmVsZWFzZV9kYXRlJyxcclxuICBDcmVhdGVkID0gJ2NyZWF0ZWQnLFxyXG4gIEVkaXRlZCA9ICdlZGl0ZWQnLFxyXG4gIFVybCA9ICd1cmwnXHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZpbG0ge1xyXG4gIGlkOiBGaWxtRmllbGRzLmlkO1xyXG4gIHRpdGxlOiBGaWxtRmllbGRzLnRpdGxlO1xyXG4gIGVwaXNvZGVfaWQ6IEZpbG1GaWVsZHMuZXBpc29kZV9pZDtcclxuICBvcGVuaW5nX2NyYXdsOiBGaWxtRmllbGRzLm9wZW5pbmdfY3Jhd2w7XHJcbiAgZGlyZWN0b3I6IEZpbG1GaWVsZHMuZGlyZWN0b3I7XHJcbiAgcHJvZHVjZXI6IEZpbG1GaWVsZHMucHJvZHVjZXI7XHJcbiAgcmVsZWFzZV9kYXRlOiBGaWxtRmllbGRzLnJlbGVhc2VfZGF0ZTtcclxuICBjcmVhdGVkOiBGaWxtRmllbGRzLmNyZWF0ZWQ7XHJcbiAgZWRpdGVkOiBGaWxtRmllbGRzLmVkaXRlZDtcclxuICB1cmw6IEZpbG1GaWVsZHMudXJsO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRmlsbVJlc3BvbnNlIGV4dGVuZHMgRmlsbXtcclxuICBjaGFyYWN0ZXJzOiAgICBJRnJvbUZvcmVpZ25UYWJsZXNbXSxcclxuICBwbGFuZXRzOiAgICAgICBJRnJvbUZvcmVpZ25UYWJsZXNbXSxcclxuICBzdGFyc2hpcHM6ICAgICBJRnJvbUZvcmVpZ25UYWJsZXNbXSxcclxuICB2ZWhpY2xlczogICAgICBJRnJvbUZvcmVpZ25UYWJsZXNbXVxyXG59XHJcblxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZ1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7IiwiaW1wb3J0IHsgSVN1YmplY3RGcm9tQXBpLCBJU3ViamVjdCB9IGZyb20gXCIuL1N1YmplY3RcIjtcclxuaW1wb3J0IHsgSVRyYW5zcG9ydEZyb21BcGksIElUcmFuc3BvcnRFbnRpdHkgfSBmcm9tIFwiLi9UcmFuc3BvcnRcIjtcclxuaW1wb3J0IHsgSUZyb21Gb3JlaWduVGFibGVzIH0gZnJvbSBcIi4vRnJvbUZvcmVpZ25UYWJsZXNcIjtcclxuXHJcbmludGVyZmFjZSBWZWhpY2xlIHsgXHJcbiAgdmVoaWNsZV9jbGFzczogc3RyaW5nXHJcbiB9XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElWZWhpY2xlRnJvbUFwaSBleHRlbmRzIElTdWJqZWN0RnJvbUFwaSwgSVRyYW5zcG9ydEZyb21BcGl7XHJcbiAgdmVoaWNsZV9jbGFzczogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVZlaGljbGVFbnRpdHkgZXh0ZW5kcyBWZWhpY2xlLCBJU3ViamVjdEZyb21BcGksIElUcmFuc3BvcnRFbnRpdHl7fVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVmVoaWNsZVJlc3BvbnNlIGV4dGVuZHMgSVZlaGljbGVFbnRpdHl7XHJcbiAgcGlsb3RzOiBJRnJvbUZvcmVpZ25UYWJsZXNbXSxcclxuICBmaWxtczogSUZyb21Gb3JlaWduVGFibGVzW11cclxufVxyXG5cclxuXHJcbmV4cG9ydCBlbnVtIFZlaGljbGVGaWVsZHNOYW1lc3tcclxuICBJZCA9ICdpZCcsXHJcbiAgTmFtZT0gJ25hbWUnLFxyXG4gIE1vZGVsID0gJ21vZGVsJyxcclxuICBNYW51ZmFjdHVyZXIgPSAnbWFudWZhY3R1cmVyJyxcclxuICBDb3N0SW5DcmVkaXRzID0gJ2Nvc3RfaW5fY3JlZGl0cycsXHJcbiAgTGVuZ2h0ID0gJ2xlbmd0aCcsXHJcbiAgTWF4QXRtb3NwaGVyaW5nU3BlZWQgPSAnbWF4X2F0bW9zcGhlcmluZ19zcGVlZCcsXHJcbiAgQ3JldyA9ICdjcmV3JyxcclxuICBQYXNzZW5nZXJzID0gJ3Bhc3NlbmdlcnMnLFxyXG4gIENhcmdvQ2FwYWNpdHkgPSAnY2FyZ29fY2FwYWNpdHknLFxyXG4gIENvbnN1bWFibGVzID0gJ2NvbnN1bWFibGVzJyxcclxuICBWZWhpY2xlQ2xhc3MgPSAndmVoaWNsZV9jbGFzcycsXHJcbiAgVXJsID0gJ3VybCdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWZWhpY2xlRmllbGRzTmFtZXNBcnJheXtcclxuICBba2V5OiBudW1iZXJdIDogVmVoaWNsZUZpZWxkc05hbWVzXHJcbn0iLCJleHBvcnQgaW50ZXJmYWNlIFZlaGljbGVzSW5GaWxtc3tcclxuICBpZDogc3RyaW5nXHJcbiAgdmVoaWNsZV9pZDogc3RyaW5nXHJcbiAgZmlsbV9pZDogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFZlaGljbGVzSW5GaWxtc0ZpZWxkc05hbWVze1xyXG4gIElkID0gJ2lkJyxcclxuICBWZWhpY2xlSWQgPSAndmVoaWNsZV9pZCcsXHJcbiAgRmlsbUlkID0gJ2ZpbG1faWQnXHJcbn0iLCJleHBvcnQgaW50ZXJmYWNlIElBY3RvcnN7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgcGVvcGxlX2lkOiBzdHJpbmc7XHJcbiAgICBmaWxtX2lkOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gSUFjdG9yc0ZpZWxkc05hbWVze1xyXG4gICAgSWQgPSAnaWQnLFxyXG4gICAgUGVvcGxlSWQgPSAncGVvcGxlX2lkJyxcclxuICAgIEZpbG1JZCA9ICAnZmlsbV9pZCdcclxufSIsImV4cG9ydCBpbnRlcmZhY2UgSVJhY2V7XHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICBwZW9wbGVfaWQ6IHN0cmluZ1xyXG4gICAgc3BlY2llX2lkOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGVudW0gUmFjZUZpZWxkc3tcclxuICAgIGlkID0gJ2lkJyxcclxuICAgIFBlb3BsZUlkID0gJ3Blb3BsZV9pZCcsXHJcbiAgICBTcGVjaWVJZCA9ICdzcGVjaWVfaWQnXHJcbn0iLCJleHBvcnQgaW50ZXJmYWNlIFBpbG90e1xyXG4gICAgaWQ6IFBpbG90RmllbGRUeXBlcy5pZDtcclxuICAgIHZlaGljbGVfaWQ6IFBpbG90RmllbGRUeXBlcy52ZWhpY2xlX2lkO1xyXG4gICAgcGVvcGxlX2lkOiBQaWxvdEZpZWxkVHlwZXMucGVvcGxlX2lkXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFBpbG90RmllbGROYW1lc3tcclxuICAgIElkID0gJ2lkJyxcclxuICAgIFZlaGljbGVJZCA9ICd2ZWhpY2xlX2lkJyxcclxuICAgIFBlb3BsZUlkID0gJ3Blb3BsZV9pZCdcclxufVxyXG5cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgUGlsb3RGaWVsZFR5cGVze1xyXG4gICAgZXhwb3J0IHR5cGUgaWQgPSBzdHJpbmc7XHJcbiAgICBleHBvcnQgdHlwZSB2ZWhpY2xlX2lkID0gc3RyaW5nO1xyXG4gICAgZXhwb3J0IHR5cGUgcGVvcGxlX2lkID0gc3RyaW5nO1xyXG59IiwiXHJcbmV4cG9ydCBuYW1lc3BhY2UgU3RhcnNoaXBQaWxvdEZpZWxkc3tcclxuICAgZXhwb3J0IHR5cGUgaWQgPSBzdHJpbmc7XHJcbiAgIGV4cG9ydCB0eXBlIHN0YXJzaGlwX2lkID0gc3RyaW5nO1xyXG4gICBleHBvcnQgdHlwZSBwZW9wbGVfaWQgPSBzdHJpbmc7IFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0YXJzaGlwUGlsb3R7XHJcbiAgICBpZDogU3RhcnNoaXBQaWxvdEZpZWxkcy5pZDtcclxuICAgIHN0YXJzaGlwX2lkOiBTdGFyc2hpcFBpbG90RmllbGRzLnN0YXJzaGlwX2lkO1xyXG4gICAgcGVvcGxlX2lkOiBTdGFyc2hpcFBpbG90RmllbGRzLnBlb3BsZV9pZDtcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU3RhcnNoaXBQaWxvdEZpZWxkc05hbWVze1xyXG4gICAgSWQgPSAnaWQnLFxyXG4gICAgU3RhcnNoaXBJZCA9ICdzdGFyc2hpcF9pZCcsXHJcbiAgICBQZW9wbGVJZCA9ICdwZW9wbGVfaWQnXHJcbn0iLCJpbXBvcnQgS25leCBmcm9tICdrbmV4JztcclxuXHJcbmV4cG9ydCBjb25zdCBrbmV4OiBLbmV4ID0gcmVxdWlyZSgna25leCcpKHJlcXVpcmUoJy4uL2tuZXhmaWxlJykuZGV2ZWxvcG1lbnQpOyIsImltcG9ydCB7IEV4ZWNFeGNlcHRpb24gfSBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFzeW5jQ29tcG9zZSA9ICguLi5mbnM6IEZ1bmN0aW9uW10pID0+IChkYXRhOiBQcm9taXNlPGFueT4pID0+XHJcbiAgZm5zLnJlZHVjZVJpZ2h0KFxyXG4gICAgKGFjYzogUHJvbWlzZTxhbnk+LCBmOiBGdW5jdGlvbiwgaW5kZXg6IG51bWJlcikgPT5cclxuICAgICAgYWNjXHJcbiAgICAgICAgLnRoZW4oKHY6IGFueSkgPT4gZih2KSlcclxuICAgICAgICAuY2F0Y2goKGU6RXhlY0V4Y2VwdGlvbikgPT4gY29uc29sZS5sb2coZSkpXHJcbiAgICAsIGRhdGFcclxuICApXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci1jb25maWdcIik7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBSb3V0ZUNvbmZpZyB9IGZyb20gJ3JlYWN0LXJvdXRlci1jb25maWcnO1xyXG5pbXBvcnQgSG9tZSBmcm9tICcuLi9wYWdlcy9Ib21lJztcclxuaW1wb3J0IEFib3V0IGZyb20gJy4uL3BhZ2VzL0Fib3V0JztcclxuaW1wb3J0IENvbnRhY3QgZnJvbSAnLi4vcGFnZXMvQ29udGFjdCc7XHJcblxyXG5jb25zdCByb3V0ZXM6Um91dGVDb25maWdbXSA9IFtcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2hvbWUnLFxyXG4gICAgICAgIGNvbXBvbmVudDogSG9tZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2Fib3V0JyxcclxuICAgICAgICBjb21wb25lbnQ6IEFib3V0XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY29udGFjdCcsXHJcbiAgICAgICAgY29tcG9uZW50OiBDb250YWN0XHJcbiAgICB9XHJcbl1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCByb3V0ZXM7XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmNvbnN0IEhvbWUgPSAocHJvcHM6YW55KT0+KFxyXG4gICAgPGRpdj5cclxuICAgICAgICBXZWxjb21lIFRvIFJlYWN0IFNTUiFcclxuICAgIDwvZGl2PlxyXG4pO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhvbWU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuXHJcbmNvbnN0IEFib3V0ID0gKHByb3BzOmFueSkgPT4oXHJcbiAgICA8ZGl2PlxyXG4gICAgICBBYm91dCB1cyFcclxuICAgIDwvZGl2PlxyXG4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWJvdXQ7XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5cclxuY29uc3QgQ29udGFjdCA9IChwcm9wczphbnkpID0+KFxyXG4gICAgPGRpdj5cclxuICAgICAgQ29udGFjdFxyXG4gICAgPC9kaXY+XHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250YWN0O1xyXG5cclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvclwiKTsiLCJmdW5jdGlvbiBsb2dnZXIocDogTm9kZUpTLlByb2Nlc3MsIGxvZ0ZuOiAoczogc3RyaW5nKSA9PiB2b2lkKSB7XHJcbiBcclxuICByZXR1cm4gKG1lc3NhZ2U6IHN0cmluZykgPT4gcC5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgJiYgbG9nRm4obWVzc2FnZSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBsb2dnZXIocHJvY2VzcywgY29uc29sZS5sb2cpOyIsInR5cGUgUG9ydCA9IHN0cmluZztcclxuXHJcbmNvbnN0IGdldFBvcnQgPSAocDpOb2RlSlMuUHJvY2Vzcyk6KFBvcnQgfCAzMDAwKSA9PiBwICYmIHAuZW52ICYmIHAuZW52LlBPUlQgPyBwLmVudi5QT1JUIDogMzAwMDtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBnZXRQb3J0OyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2VcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5c1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZ1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyYW1kYVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJoZWxtZXRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtZG9tL3NlcnZlclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtaGVsbWV0XCIpOyIsImltcG9ydCB7IElQbGFuZXRFbnRpdHkgYXMgUGxhbmV0fSBmcm9tICcuL1BsYW5ldCc7XHJcbmltcG9ydCB7IElTdWJqZWN0LCBJU3ViamVjdEZyb21BcGkgfSBmcm9tICcuL1N1YmplY3QnO1xyXG5pbXBvcnQgeyBJRnJvbUZvcmVpZ25UYWJsZXMgfSBmcm9tICcuL0Zyb21Gb3JlaWduVGFibGVzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNwZWNpZUVudGl0eSBleHRlbmRzIElTdWJqZWN0e1xyXG4gIGNsYXNzaWZpY2F0aW9uOiBzdHJpbmdcclxuICBkZXNpZ25hdGlvbjogc3RyaW5nXHJcbiAgYXZlcmFnZV9oZWlnaHQ6IHN0cmluZ1xyXG4gIHNraW5fY29sb3JzOiBzdHJpbmdcclxuICBoYWlyX2NvbG9yczogc3RyaW5nXHJcbiAgZXllX2NvbG9yczogc3RyaW5nXHJcbiAgYXZlcmFnZV9saWZlc3Bhbjogc3RyaW5nXHJcbiAgbGFuZ3VhZ2U6IHN0cmluZ1xyXG4gIGhvbWV3b3JsZDogUGxhbmV0XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNwZWNpZUZyb21BcGkgZXh0ZW5kcyBJU3ViamVjdEZyb21BcGl7XHJcbiAgY2xhc3NpZmljYXRpb246IHN0cmluZ1xyXG4gIHBlb3BsZTogc3RyaW5nW11cclxuICBmaWxtczogc3RyaW5nW11cclxuICBkZXNpZ25hdGlvbjogc3RyaW5nXHJcbiAgYXZlcmFnZV9oZWlnaHQ6IHN0cmluZ1xyXG4gIHNraW5fY29sb3JzOiBzdHJpbmdcclxuICBoYWlyX2NvbG9yczogc3RyaW5nXHJcbiAgZXllX2NvbG9yczogc3RyaW5nXHJcbiAgYXZlcmFnZV9saWZlc3Bhbjogc3RyaW5nXHJcbiAgbGFuZ3VhZ2U6IHN0cmluZ1xyXG4gIGhvbWV3b3JsZDogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIElTcGVjaWVFbnRpdHlGaWVsZHN7XHJcbiAgSWQ9J2lkJyxcclxuICBOYW1lID0gJ25hbWUnLFxyXG4gIENsYXNzaWZpY2F0aW9uID0gJ2NsYXNzaWZpY2F0aW9uJyxcclxuICBEZXNpZ25hdGlvbiA9ICdkZXNpZ25hdGlvbicsXHJcbiAgQXZlcmFnZUhlaWdodCA9ICdhdmVyYWdlX2hlaWdodCcsXHJcbiAgU2tpbkNvbG9ycyA9ICdza2luX2NvbG9ycycsXHJcbiAgSGFpckNvbG9ycyA9ICdoYWlyX2NvbG9ycycsXHJcbiAgRXllQ29sb3JzID0gJ2V5ZV9jb2xvcnMnLFxyXG4gIEF2ZXJhZ2VMaWZlc3BhbiA9ICdhdmVyYWdlX2xpZmVzcGFuJyxcclxuICBIb21ld29ybGQgPSAnaG9tZXdvcmxkJyxcclxuICBMYW5ndWFnZSA9ICdsYW5ndWFnZScsXHJcbiAgVXJsID0gJ3VybCdcclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNwZWNpZVJlc3BvbnNlIGV4dGVuZHMgSVNwZWNpZUVudGl0eXtcclxuICBwZW9wbGU6IElGcm9tRm9yZWlnblRhYmxlc1tdLFxyXG4gIGZpbG1zOiBJRnJvbUZvcmVpZ25UYWJsZXNbXVxyXG59IiwiaW1wb3J0IHtJU3ViamVjdCwgSVN1YmplY3RGcm9tQXBpfSBmcm9tICcuL1N1YmplY3QnO1xyXG5pbXBvcnQgeyBJVHJhbnNwb3J0RnJvbUFwaSwgSVRyYW5zcG9ydEVudGl0eSB9IGZyb20gJy4vVHJhbnNwb3J0JztcclxuaW1wb3J0IHsgSUZyb21Gb3JlaWduVGFibGVzIH0gZnJvbSAnLi9Gcm9tRm9yZWlnblRhYmxlcyc7XHJcbmludGVyZmFjZSBJU3RhcnNoaXB7XHJcbiAgaHlwZXJkcml2ZV9yYXRpbmc6IHN0cmluZ1xyXG4gIE1HTFQ6IHN0cmluZ1xyXG4gIHN0YXJzaGlwX2NsYXNzOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJU3RhcnNoaXBGcm9tQXBpIGV4dGVuZHMgSVN0YXJzaGlwLCBJU3ViamVjdEZyb21BcGksIElUcmFuc3BvcnRGcm9tQXBpe31cclxuZXhwb3J0IGludGVyZmFjZSBJU3RhcnNoaXBFbnRpdHkgZXh0ZW5kcyBJU3RhcnNoaXAgLElTdWJqZWN0LCBJVHJhbnNwb3J0RW50aXR5e31cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXJzaGlwUmVzcG9uc2UgZXh0ZW5kcyBJU3RhcnNoaXBFbnRpdHl7XHJcbiAgcGlsb3RzOiBJRnJvbUZvcmVpZ25UYWJsZXNbXSxcclxuICBmaWxtczogSUZyb21Gb3JlaWduVGFibGVzW11cclxufVxyXG5cclxuXHJcbmV4cG9ydCBlbnVtIFN0YXJzaGlwRW50aXR5RmllbGRzIHtcclxuICBJZCA9ICdpZCcsXHJcbiAgVXJsID0gJ3VybCcsXHJcbiAgTmFtZSA9ICduYW1lJyxcclxuICBDcmVhdGVkID0gJ2NyZWF0ZWQnLFxyXG4gIEVkaXRlZCA9ICdlZGl0ZWQnLFxyXG4gIE1vZGVsID0gJ21vZGVsJyxcclxuICBNYW51ZmFjdHVyZXIgPSAnbWFudWZhY3R1cmVyJyxcclxuICBDb3N0SW5DcmVkaXRzID0gJ2Nvc3RfaW5fY3JlZGl0cycsXHJcbiAgTGVuZ3RoID0gJ2xlbmd0aCcsXHJcbiAgTWF4QXRtb3NwaGVyaW5nU3BlZWQgPSAnbWF4X2F0bW9zcGhlcmluZ19zcGVlZCcsXHJcbiAgQ3JldyA9ICdjcmV3JyxcclxuICBQYXNzZW5nZXJzID0gJ3Bhc3NlbmdlcnMnLFxyXG4gIENhcmdvQ2FwYWNpdHkgPSAnY2FyZ29fY2FwYWNpdHknLFxyXG4gIENvbnN1bWFibGVzID0gJ2NvbnN1bWFibGVzJyxcclxuICBIeXBlcmRyaXZlUmF0aW5nID0gJ2h5cGVyZHJpdmVfcmF0aW5nJyxcclxuICBNR0xUID0gJ01HTFQnLFxyXG4gIFN0YXJzaGlwQ2xhc3MgPSAnc3RhcnNoaXBfY2xhc3MnXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RhcnNoaXBFbnRpdHlGaWVsZHNBcnJheXtcclxuICByZWFkb25seSBbaW5kZXg6IG51bWJlcl06IFN0YXJzaGlwRW50aXR5RmllbGRzXHJcbn0iLCJpbXBvcnQgeyBhc3luY01lbW9pemUgYXMgTWVtIH0gZnJvbSBcIi4uL3V0aWxzL21lbW9pemVcIlxyXG5pbXBvcnQgeyBnZXRCeUlkUXVlcnkgfSBmcm9tIFwiLi4vREIvZ2V0QnlJZFwiXHJcbmltcG9ydCB7IEVudGl0eVRhYmxlLCBNYW55VG9NYW55VGFibGUsIE9uZVRvTWFueVRhYmxlIH0gZnJvbSBcIi4uL3R5cGVzL1RhYmxlc1wiXHJcbmltcG9ydCB7IElGaWxtUmVzcG9uc2UsIEZpbG1GaWVsZHNOYW1lcyB9IGZyb20gXCIuLi90eXBlcy9pbnRlcmZhY2VzL0ZpbG1cIlxyXG5pbXBvcnQgeyBJQWN0b3JzRmllbGRzTmFtZXMgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9BY3RvcnNcIlxyXG5pbXBvcnQgeyBJU3BlY2llRW50aXR5RmllbGRzIH0gZnJvbSBcIi4uL3R5cGVzL2ludGVyZmFjZXMvU3BlY2llXCJcclxuaW1wb3J0IHsgUmFjZUZpZWxkcyB9IGZyb20gXCIuLi90eXBlcy9pbnRlcmZhY2VzL1JhY2VzXCJcclxuaW1wb3J0IHsgVmVoaWNsZUZpZWxkc05hbWVzIH0gZnJvbSBcIi4uL3R5cGVzL2ludGVyZmFjZXMvVmVoaWNsZVwiXHJcbmltcG9ydCB7IFBpbG90RmllbGROYW1lcyB9IGZyb20gXCIuLi90eXBlcy9pbnRlcmZhY2VzL1BpbG90XCJcclxuaW1wb3J0IHsgU3RhcnNoaXBFbnRpdHlGaWVsZHMgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9TdGFyc2hpcFwiXHJcbmltcG9ydCB7IFN0YXJzaGlwUGlsb3RGaWVsZHNOYW1lcyB9IGZyb20gXCIuLi90eXBlcy9pbnRlcmZhY2VzL1N0YXJzaGlwUGlsb3RcIlxyXG5pbXBvcnQgeyBnZXRBbGwgfSBmcm9tIFwiLi4vREIvZ2V0QWxsXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0KCgpID0+IHtcclxuICBjb25zdCBfZ2V0QnlJZCA9IE1lbShnZXRCeUlkUXVlcnk8RW50aXR5VGFibGUuUGVvcGxlLCBJRmlsbVJlc3BvbnNlPihFbnRpdHlUYWJsZS5QZW9wbGUsXHJcbiAgICBbXHJcbiAgICAgIHtcclxuICAgICAgICB0YWJsZU5hbWU6IEVudGl0eVRhYmxlLkZpbG0sXHJcbiAgICAgICAgc2hvd0ZpZWxkczogW0ZpbG1GaWVsZHNOYW1lcy5JZCwgRmlsbUZpZWxkc05hbWVzLlRpdGxlXSxcclxuICAgICAgICBmaWVsZE5hbWVJblJlc3BvbnNlOiAnZmlsbXMnLFxyXG4gICAgICAgIG1hbnlUb01hbnlUYWJsZU5hbWU6IE1hbnlUb01hbnlUYWJsZS5BY3RvcnMsXHJcbiAgICAgICAgaW50ZXJzZWN0RW50aXR5T246IElBY3RvcnNGaWVsZHNOYW1lcy5GaWxtSWQsXHJcbiAgICAgICAgd2hlcmU6IElBY3RvcnNGaWVsZHNOYW1lcy5QZW9wbGVJZFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGFibGVOYW1lOiBFbnRpdHlUYWJsZS5TcGVjaWUsXHJcbiAgICAgICAgc2hvd0ZpZWxkczogW0lTcGVjaWVFbnRpdHlGaWVsZHMuSWQsIElTcGVjaWVFbnRpdHlGaWVsZHMuTmFtZV0sXHJcbiAgICAgICAgZmllbGROYW1lSW5SZXNwb25zZTogJ3NwZWNpZXMnLFxyXG4gICAgICAgIG1hbnlUb01hbnlUYWJsZU5hbWU6IE9uZVRvTWFueVRhYmxlLlJhY2UsXHJcbiAgICAgICAgaW50ZXJzZWN0RW50aXR5T246IFJhY2VGaWVsZHMuU3BlY2llSWQsXHJcbiAgICAgICAgd2hlcmU6IFJhY2VGaWVsZHMuUGVvcGxlSWRcclxuXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0YWJsZU5hbWU6IEVudGl0eVRhYmxlLlZlaGljbGUsXHJcbiAgICAgICAgc2hvd0ZpZWxkczogW1ZlaGljbGVGaWVsZHNOYW1lcy5JZCwgVmVoaWNsZUZpZWxkc05hbWVzLk5hbWVdLFxyXG4gICAgICAgIGZpZWxkTmFtZUluUmVzcG9uc2U6ICd2ZWhpY2xlcycsXHJcbiAgICAgICAgbWFueVRvTWFueVRhYmxlTmFtZTogTWFueVRvTWFueVRhYmxlLlBpbG90LFxyXG4gICAgICAgIGludGVyc2VjdEVudGl0eU9uOiBQaWxvdEZpZWxkTmFtZXMuVmVoaWNsZUlkLFxyXG4gICAgICAgIHdoZXJlOiBQaWxvdEZpZWxkTmFtZXMuUGVvcGxlSWRcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRhYmxlTmFtZTogRW50aXR5VGFibGUuU3RhcnNoaXAsXHJcbiAgICAgICAgc2hvd0ZpZWxkczogW1N0YXJzaGlwRW50aXR5RmllbGRzLklkLCBTdGFyc2hpcEVudGl0eUZpZWxkcy5OYW1lXSxcclxuICAgICAgICBmaWVsZE5hbWVJblJlc3BvbnNlOiAnc3RhcnNoaXBzJyxcclxuICAgICAgICBtYW55VG9NYW55VGFibGVOYW1lOiBNYW55VG9NYW55VGFibGUuU3RhcnNoaXBQaWxvdCxcclxuICAgICAgICBpbnRlcnNlY3RFbnRpdHlPbjogU3RhcnNoaXBQaWxvdEZpZWxkc05hbWVzLlN0YXJzaGlwSWQsXHJcbiAgICAgICAgd2hlcmU6IFN0YXJzaGlwUGlsb3RGaWVsZHNOYW1lcy5QZW9wbGVJZFxyXG4gICAgICB9XHJcbiAgICBdKSlcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldEJ5SWQ6IF9nZXRCeUlkLFxyXG4gICAgZ2V0QWxsOiBnZXRBbGwoRW50aXR5VGFibGUuUGVvcGxlLCBfZ2V0QnlJZClcclxuICB9XHJcbn0pKCkiLCJpbXBvcnQgeyBSb3V0ZXIsIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCBQZW9wbGUgIGZyb20gJy4uL2NvbnRyb2xsZXJzL3Blb3BsZSc7XHJcblxyXG5jb25zdCBSOlJvdXRlciA9IFJvdXRlcigpO1xyXG5cclxuXHJcblIuZ2V0KCcvOmlkJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk9PntcclxuICBQZW9wbGUuZ2V0QnlJZChyZXEucGFyYW1zLmlkKSgpXHJcbiAgIC50aGVuKChyZXN1bHQ6YW55KSA9PiByZXMuanNvbihyZXN1bHQpKTtcclxufSlcclxuXHJcblIuZ2V0KCcvJywgYXN5bmMocmVxOlJlcXVlc3QsIHJlczpSZXNwb25zZSk9PntcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBQZW9wbGUuZ2V0QWxsKClcclxuICByZXMuanNvbihyZXN1bHQpXHJcbn0pXHJcbmV4cG9ydCBkZWZhdWx0IFI7IiwiZXhwb3J0IGludGVyZmFjZSBTdGFyc2hpcHNJbkZpbG1ze1xyXG4gIGlkOiBzdHJpbmdcclxuICBzdGFyc2hpcF9pZDogc3RyaW5nXHJcbiAgZmlsbV9pZDogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFN0YXJzaGlwc0luRmlsbXNGaWVsZHN7XHJcbiAgSWQgPSAnaWQnLFxyXG4gIFN0YXJzaGlwSWQgPSAnc3RhcnNoaXBfaWQnLFxyXG4gIEZpbG1JZCA9ICdmaWxtX2lkJ1xyXG59IiwiaW1wb3J0IHsgYXN5bmNNZW1vaXplIGFzIE1lbSB9IGZyb20gXCIuLi91dGlscy9tZW1vaXplXCJcclxuaW1wb3J0IHsgZ2V0QnlJZFF1ZXJ5IH0gZnJvbSBcIi4uL0RCL2dldEJ5SWRcIlxyXG5pbXBvcnQgeyBFbnRpdHlUYWJsZSwgTWFueVRvTWFueVRhYmxlIH0gZnJvbSBcIi4uL3R5cGVzL1RhYmxlc1wiXHJcbmltcG9ydCB7IElTdGFyc2hpcFJlc3BvbnNlIH0gZnJvbSBcIi4uL3R5cGVzL2ludGVyZmFjZXMvU3RhcnNoaXBcIlxyXG5pbXBvcnQgeyBGaWxtRmllbGRzTmFtZXMgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9GaWxtXCJcclxuaW1wb3J0IHsgU3RhcnNoaXBzSW5GaWxtc0ZpZWxkcyB9IGZyb20gXCIuLi90eXBlcy9pbnRlcmZhY2VzL1N0YXJzaGlwc0luRmlsbXNcIlxyXG5pbXBvcnQgeyBJUGVvcGxlRW50aXR5RmllbGRzIH0gZnJvbSBcIi4uL3R5cGVzL2ludGVyZmFjZXMvUGVvcGxlXCJcclxuaW1wb3J0IHsgZ2V0QWxsIH0gZnJvbSBcIi4uL0RCL2dldEFsbFwiXHJcbmltcG9ydCB7IFN0YXJzaGlwUGlsb3RGaWVsZHNOYW1lcyB9IGZyb20gXCIuLi90eXBlcy9pbnRlcmZhY2VzL1N0YXJzaGlwUGlsb3RcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQoKCkgPT4ge1xyXG4gIGNvbnN0IF9nZXRCeUlkID0gTWVtKGdldEJ5SWRRdWVyeTxFbnRpdHlUYWJsZS5TdGFyc2hpcCwgSVN0YXJzaGlwUmVzcG9uc2U+KFxyXG4gICAgRW50aXR5VGFibGUuU3RhcnNoaXAsXHJcbiAgICBbXHJcbiAgICAgIHtcclxuICAgICAgICB0YWJsZU5hbWU6IEVudGl0eVRhYmxlLkZpbG0sXHJcbiAgICAgICAgc2hvd0ZpZWxkczogW0ZpbG1GaWVsZHNOYW1lcy5JZCwgRmlsbUZpZWxkc05hbWVzLlRpdGxlXSxcclxuICAgICAgICBmaWVsZE5hbWVJblJlc3BvbnNlOiAnZmlsbXMnLFxyXG4gICAgICAgIG1hbnlUb01hbnlUYWJsZU5hbWU6IE1hbnlUb01hbnlUYWJsZS5TdGFyc2hpcHNJbkZpbG1zLFxyXG4gICAgICAgIGludGVyc2VjdEVudGl0eU9uOiBTdGFyc2hpcHNJbkZpbG1zRmllbGRzLkZpbG1JZCxcclxuICAgICAgICB3aGVyZTogU3RhcnNoaXBzSW5GaWxtc0ZpZWxkcy5TdGFyc2hpcElkXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0YWJsZU5hbWU6IEVudGl0eVRhYmxlLlBlb3BsZSxcclxuICAgICAgICBzaG93RmllbGRzOiBbSVBlb3BsZUVudGl0eUZpZWxkcy5JZCwgSVBlb3BsZUVudGl0eUZpZWxkcy5OYW1lXSxcclxuICAgICAgICBmaWVsZE5hbWVJblJlc3BvbnNlOiAncGlsb3RzJyxcclxuICAgICAgICBtYW55VG9NYW55VGFibGVOYW1lOiBNYW55VG9NYW55VGFibGUuU3RhcnNoaXBQaWxvdCxcclxuICAgICAgICBpbnRlcnNlY3RFbnRpdHlPbjogU3RhcnNoaXBQaWxvdEZpZWxkc05hbWVzLlBlb3BsZUlkLFxyXG4gICAgICAgIHdoZXJlOiBTdGFyc2hpcFBpbG90RmllbGRzTmFtZXMuU3RhcnNoaXBJZFxyXG4gICAgICB9XHJcblxyXG4gICAgXVxyXG4gICkpXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBnZXRCeUlkOiBfZ2V0QnlJZCxcclxuICAgIGdldEFsbDogZ2V0QWxsKEVudGl0eVRhYmxlLlN0YXJzaGlwLCBfZ2V0QnlJZClcclxuICB9XHJcbn0pKCkiLCJpbXBvcnQgeyBSb3V0ZXIsIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCAgU3RhcnNoaXAgIGZyb20gJy4uL2NvbnRyb2xsZXJzL3N0YXJzaGlwJztcclxuXHJcbmNvbnN0IFIgPSBSb3V0ZXIoKTtcclxuXHJcblIuZ2V0KCcvOmlkJywgYXN5bmMgKHJlcTpSZXF1ZXN0LCByZXM6UmVzcG9uc2UpPT57XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBTdGFyc2hpcC5nZXRCeUlkKHJlcS5wYXJhbXMuaWQpXHJcbiAgICByZXMuanNvbihyZXN1bHQpXHJcbn0pXHJcblxyXG5SLmdldCgnLycsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpPT57XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBTdGFyc2hpcC5nZXRBbGwoKTtcclxuICAgIHJlcy5qc29uKHJlc3VsdClcclxufSlcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBSOyIsImV4cG9ydCBpbnRlcmZhY2UgSVNwZWNpZXNJbkZpbG1ze1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGZpbG1faWQ6IHN0cmluZztcclxuICAgIHNwZWNpZV9pZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIFNwZWNpZXNJbkZpbG1zRmllbGRzVHlwZXtcclxuICAgIGV4cG9ydCB0eXBlIGlkID0gc3RyaW5nO1xyXG4gICAgZXhwb3J0IHR5cGUgZmlsbV9pZCA9IHN0cmluZztcclxuICAgIGV4cG9ydCB0eXBlIHNwZWNpZV9pZCA9IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU3BlY2llc0luRmlsbXNGaWVsZHNOYW1le1xyXG4gICAgSWQgPSAnaWQnLFxyXG4gICAgRmlsbUlkID0gJ2ZpbG1faWQnLFxyXG4gICAgU3BlY2llSWQgPSAnc3BlY2llX2lkJyAgICBcclxufSIsImltcG9ydCB7IGdldEJ5SWRRdWVyeSB9IGZyb20gXCIuLi9EQi9nZXRCeUlkXCI7XHJcbmltcG9ydCB7IGFzeW5jTWVtb2l6ZSBhcyBNZW0gfSBmcm9tIFwiLi4vdXRpbHMvbWVtb2l6ZVwiO1xyXG5pbXBvcnQgeyBJU3BlY2llUmVzcG9uc2UgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9TcGVjaWVcIjtcclxuaW1wb3J0IHsgRW50aXR5VGFibGUsIE1hbnlUb01hbnlUYWJsZSwgT25lVG9NYW55VGFibGUgfSBmcm9tIFwiLi4vdHlwZXMvVGFibGVzXCI7XHJcbmltcG9ydCB7IElQZW9wbGVFbnRpdHlGaWVsZHMgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9QZW9wbGVcIjtcclxuaW1wb3J0IHsgU3BlY2llc0luRmlsbXNGaWVsZHNOYW1lIH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcy9TcGVjaWVzSW5GaWxtcyc7XHJcbmltcG9ydCB7IFJhY2VGaWVsZHMgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9SYWNlc1wiO1xyXG5pbXBvcnQgeyBGaWxtRmllbGRzTmFtZXMgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9GaWxtXCI7XHJcbmltcG9ydCB7IGdldEFsbCB9IGZyb20gXCIuLi9EQi9nZXRBbGxcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiB7XHJcbiAgY29uc3QgX2dldEJ5SWQgPSBNZW0oZ2V0QnlJZFF1ZXJ5PEVudGl0eVRhYmxlLlNwZWNpZSwgSVNwZWNpZVJlc3BvbnNlPihcclxuICAgIEVudGl0eVRhYmxlLlNwZWNpZSwgW1xyXG4gICAge1xyXG4gICAgICB0YWJsZU5hbWU6IEVudGl0eVRhYmxlLkZpbG0sXHJcbiAgICAgIHNob3dGaWVsZHM6IFtGaWxtRmllbGRzTmFtZXMuSWQsIEZpbG1GaWVsZHNOYW1lcy5UaXRsZV0sXHJcbiAgICAgIGZpZWxkTmFtZUluUmVzcG9uc2U6ICdmaWxtcycsXHJcbiAgICAgIG1hbnlUb01hbnlUYWJsZU5hbWU6IE1hbnlUb01hbnlUYWJsZS5TcGVjaWVzSW5GaWxtcyxcclxuICAgICAgaW50ZXJzZWN0RW50aXR5T246IFNwZWNpZXNJbkZpbG1zRmllbGRzTmFtZS5GaWxtSWQsXHJcbiAgICAgIHdoZXJlOiBTcGVjaWVzSW5GaWxtc0ZpZWxkc05hbWUuU3BlY2llSWRcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHRhYmxlTmFtZTogRW50aXR5VGFibGUuUGVvcGxlLFxyXG4gICAgICBzaG93RmllbGRzOiBbSVBlb3BsZUVudGl0eUZpZWxkcy5JZCwgSVBlb3BsZUVudGl0eUZpZWxkcy5OYW1lXSxcclxuICAgICAgZmllbGROYW1lSW5SZXNwb25zZTogJ3Blb3BsZScsXHJcbiAgICAgIG1hbnlUb01hbnlUYWJsZU5hbWU6IE9uZVRvTWFueVRhYmxlLlJhY2UsXHJcbiAgICAgIGludGVyc2VjdEVudGl0eU9uOiBSYWNlRmllbGRzLlBlb3BsZUlkLFxyXG4gICAgICB3aGVyZTogUmFjZUZpZWxkcy5TcGVjaWVJZFxyXG4gICAgfVxyXG5cclxuICBdKSlcclxuICByZXR1cm4ge1xyXG4gICAgZ2V0QnlJZDogX2dldEJ5SWQsXHJcbiAgICBnZXRBbGw6IGdldEFsbChFbnRpdHlUYWJsZS5TcGVjaWUsIF9nZXRCeUlkKVxyXG4gIH1cclxufSkoKSIsImltcG9ydCB7IFJvdXRlciwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcclxuaW1wb3J0IFNwZWNpZSAgZnJvbSAnLi4vY29udHJvbGxlcnMvc3BlY2llJztcclxuY29uc3QgUiA9IFJvdXRlcigpO1xyXG5cclxuUi5nZXQoJy86aWQnLCBhc3luYyAocmVxOlJlcXVlc3QsIHJlczpSZXNwb25zZSk9PntcclxuICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgIFNwZWNpZS5nZXRCeUlkKHJlcS5wYXJhbXMuaWQpKCk7XHJcbiAgIHJlcy5qc29uKHJlc3VsdCk7XHJcbn0pXHJcblxyXG5SLmdldCgnLycsIGFzeW5jIChyZXE6UmVxdWVzdCwgcmVzOiBSZXNwb25zZSk9PntcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBTcGVjaWUuZ2V0QWxsKCk7XHJcbiAgcmVzLmpzb24ocmVzdWx0KTtcclxufSlcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBSOyIsImltcG9ydCB7IGFzeW5jTWVtb2l6ZSBhcyBNZW0gfSBmcm9tICcuLi91dGlscy9tZW1vaXplJztcclxuaW1wb3J0IHsgRW50aXR5VGFibGUsIE1hbnlUb01hbnlUYWJsZSwgVGFibGUgfSBmcm9tICcuLi90eXBlcy9UYWJsZXMnO1xyXG5pbXBvcnQgeyBJRmlsbVJlc3BvbnNlIH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcy9GaWxtJztcclxuaW1wb3J0IHsgZ2V0QnlJZFF1ZXJ5IH0gZnJvbSAnLi4vREIvZ2V0QnlJZCc7XHJcbmltcG9ydCB7IFZlaGljbGVGaWVsZHNOYW1lcyB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMvVmVoaWNsZSc7XHJcbmltcG9ydCB7IFZlaGljbGVzSW5GaWxtc0ZpZWxkc05hbWVzIH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcy9WZWhpY2xlc0luRmlsbXMnO1xyXG5pbXBvcnQgeyBJUGVvcGxlRW50aXR5RmllbGRzIH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcy9QZW9wbGUnO1xyXG5pbXBvcnQgeyBJQWN0b3JzRmllbGRzTmFtZXMgfSBmcm9tICcuLi90eXBlcy9pbnRlcmZhY2VzL0FjdG9ycyc7XHJcbmltcG9ydCB7IGdldEFsbCB9IGZyb20gJy4uL0RCL2dldEFsbCc7XHJcbmV4cG9ydCBkZWZhdWx0KCgpID0+IHtcclxuICBjb25zdCBfZ2V0QnlJZCA9IE1lbShnZXRCeUlkUXVlcnk8RW50aXR5VGFibGUuRmlsbSwgSUZpbG1SZXNwb25zZT4oXHJcbiAgICBFbnRpdHlUYWJsZS5GaWxtLFxyXG4gICAgW1xyXG4gICAgICB7XHJcbiAgICAgICAgdGFibGVOYW1lOiBFbnRpdHlUYWJsZS5WZWhpY2xlLFxyXG4gICAgICAgIHNob3dGaWVsZHM6IFtWZWhpY2xlRmllbGRzTmFtZXMuSWQsIFZlaGljbGVGaWVsZHNOYW1lcy5OYW1lXSxcclxuICAgICAgICBmaWVsZE5hbWVJblJlc3BvbnNlOiAndmVoaWNsZXMnLFxyXG4gICAgICAgIG1hbnlUb01hbnlUYWJsZU5hbWU6IE1hbnlUb01hbnlUYWJsZS5WZWhpY2xlc0luRmlsbXMsXHJcbiAgICAgICAgaW50ZXJzZWN0RW50aXR5T246IFZlaGljbGVzSW5GaWxtc0ZpZWxkc05hbWVzLlZlaGljbGVJZCxcclxuICAgICAgICB3aGVyZTogVmVoaWNsZXNJbkZpbG1zRmllbGRzTmFtZXMuVmVoaWNsZUlkXHJcblxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGFibGVOYW1lOiBFbnRpdHlUYWJsZS5QZW9wbGUsXHJcbiAgICAgICAgc2hvd0ZpZWxkczogW0lQZW9wbGVFbnRpdHlGaWVsZHMuSWQsIElQZW9wbGVFbnRpdHlGaWVsZHMuTmFtZV0sXHJcbiAgICAgICAgZmllbGROYW1lSW5SZXNwb25zZTogJ2FjdG9ycycsXHJcbiAgICAgICAgbWFueVRvTWFueVRhYmxlTmFtZTogTWFueVRvTWFueVRhYmxlLkFjdG9ycyxcclxuICAgICAgICBpbnRlcnNlY3RFbnRpdHlPbjogSUFjdG9yc0ZpZWxkc05hbWVzLlBlb3BsZUlkLFxyXG4gICAgICAgIHdoZXJlOiBJQWN0b3JzRmllbGRzTmFtZXMuRmlsbUlkXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0YWJsZU5hbWU6IEVudGl0eVRhYmxlLlN0YXJzaGlwLFxyXG4gICAgICAgIHNob3dGaWVsZHM6IFsnaWQnLCAnbmFtZSddLFxyXG4gICAgICAgIGZpZWxkTmFtZUluUmVzcG9uc2U6ICd2ZWhpY2xlcycsXHJcbiAgICAgICAgbWFueVRvTWFueVRhYmxlTmFtZTogTWFueVRvTWFueVRhYmxlLlN0YXJzaGlwc0luRmlsbXMsXHJcbiAgICAgICAgaW50ZXJzZWN0RW50aXR5T246ICdzdGFyc2hpcF9pZCcsXHJcbiAgICAgICAgd2hlcmU6ICdmaWxtX2lkJ1xyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGFibGVOYW1lOiBFbnRpdHlUYWJsZS5QbGFuZXQsXHJcbiAgICAgICAgc2hvd0ZpZWxkczogWydpZCcsICduYW1lJ10sXHJcbiAgICAgICAgZmllbGROYW1lSW5SZXNwb25zZTogJ3BsYW5ldHMnLFxyXG4gICAgICAgIG1hbnlUb01hbnlUYWJsZU5hbWU6IE1hbnlUb01hbnlUYWJsZS5QbGFuZXRzSW5GaWxtcyxcclxuICAgICAgICBpbnRlcnNlY3RFbnRpdHlPbjogJ3BsYW5ldF9pZCcsXHJcbiAgICAgICAgd2hlcmU6ICdmaWxtX2lkJ1xyXG4gICAgICB9XHJcbiAgICBdLFxyXG4gICkpXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldEJ5SWQ6IF9nZXRCeUlkLFxyXG4gICAgZ2V0QWxsOiBnZXRBbGwoRW50aXR5VGFibGUuRmlsbSwgX2dldEJ5SWQpXHJcbiAgfVxyXG59KSgpXHJcblxyXG5cclxuIiwiaW1wb3J0IHtSb3V0ZXIsIFJlcXVlc3QsIFJlc3BvbnNlfSBmcm9tICdleHByZXNzJztcclxuaW1wb3J0IHsgSUZpbG1SZXNwb25zZSB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMvRmlsbSc7XHJcbmltcG9ydCBGaWxtIGZyb20gJy4uL2NvbnRyb2xsZXJzL2ZpbG0nO1xyXG5cclxuXHJcbmNvbnN0IFI6Um91dGVyID0gUm91dGVyKCk7XHJcblxyXG5SLmdldCgnL2luc2VydCcsIGFzeW5jIChyZXE6UmVxdWVzdCwgcmVzOlJlc3BvbnNlKT0+e1xyXG4gIFxyXG4gXHJcbn0pXHJcblIuZ2V0KCcvOmlkJywgYXN5bmMgKHJlcTpSZXF1ZXN0LCByZXM6UmVzcG9uc2UpID0+IHtcclxuIGNvbnN0IHJlc3VsdDpJRmlsbVJlc3BvbnNlID0gYXdhaXQgRmlsbS5nZXRCeUlkKHJlcS5wYXJhbXMuaWQpKClcclxuICByZXMuanNvbihyZXN1bHQpOyAgIFxyXG59KTtcclxuUi5nZXQoJy8nLCBhc3luYyAocmVxOlJlcXVlc3QsIHJlczpSZXNwb25zZSk9PntcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBGaWxtLmdldEFsbCgpO1xyXG4gIHJlcy5qc29uKHJlc3VsdCk7IFxyXG59KVxyXG4gZXhwb3J0IGRlZmF1bHQgUjsiLCJpbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IEFwcFJlbmRlcmVkVG9TdHJpbmcgZnJvbSBcIi4vQXBwUmVuZGVyZWRUb1N0cmluZ1wiO1xyXG5pbXBvcnQgeyBIZWxtZXQsIEhlbG1ldERhdGEgfSBmcm9tICdyZWFjdC1oZWxtZXQnO1xyXG5pbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSBcImV4cHJlc3NcIjtcclxuY29uc3QgaGVsbWV0OkhlbG1ldERhdGEgPSBIZWxtZXQucmVuZGVyU3RhdGljKCk7XHJcblxyXG5jb25zdCByZW5kZXJSZWFjdEFwcCA9IChyZXE6IFJlcXVlc3QpID0+IHJlYWRGaWxlU3luYygnLi9wdWJsaWMvaW5kZXguaHRtbCcgLCAndXRmOCcpXHJcbiAgICAgICAgLnJlcGxhY2UoJ19fQVBQX18nLCBBcHBSZW5kZXJlZFRvU3RyaW5nKHJlcSkpXHJcbiAgICAgICAgLnJlcGxhY2UoJ0hFTE1FVC1NRVRBJywgaGVsbWV0Lm1ldGEudG9TdHJpbmcoKSlcclxuICAgICAgICAucmVwbGFjZSgnSEVMTUVULVRJVExFJywgaGVsbWV0LnRpdGxlLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgLnJlcGxhY2UoJ0hFTE1FVC1CT0RZLUFUVFJJQlVURVMnLCBoZWxtZXQuYm9keUF0dHJpYnV0ZXMudG9TdHJpbmcoKSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZW5kZXJSZWFjdEFwcDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXJUb1N0cmluZyB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCI7XHJcbmltcG9ydCB7IFN0YXRpY1JvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gXCJleHByZXNzXCI7XHJcbmltcG9ydCB7IHJlbmRlclJvdXRlcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItY29uZmlnXCI7XHJcbmltcG9ydCByb3V0ZXMgZnJvbSBcIi4uLy4uL2NsaWVudC9yb3V0ZXNcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCAocmVxOlJlcXVlc3QsIGNvbnRleHQ9e30pPT4gcmVuZGVyVG9TdHJpbmcoXHJcbiAgICA8U3RhdGljUm91dGVyIGxvY2F0aW9uPXtyZXEucGF0aH0gY29udGV4dD17Y29udGV4dH0+XHJcbiAgICAgIDxkaXY+e3JlbmRlclJvdXRlcyhyb3V0ZXMpfTwvZGl2PlxyXG4gICAgPC9TdGF0aWNSb3V0ZXI+XHJcbiAgKTsiLCJpbXBvcnQgeyBhc3luY01lbW9pemUgYXMgTWVtIH0gZnJvbSBcIi4uL3V0aWxzL21lbW9pemVcIlxyXG5pbXBvcnQgeyBnZXRCeUlkUXVlcnkgfSBmcm9tIFwiLi4vREIvZ2V0QnlJZFwiXHJcbmltcG9ydCB7IElWZWhpY2xlRW50aXR5LCBJVmVoaWNsZVJlc3BvbnNlLCBWZWhpY2xlRmllbGRzTmFtZXMgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9WZWhpY2xlXCJcclxuaW1wb3J0IHsgRW50aXR5VGFibGUsIE1hbnlUb01hbnlUYWJsZSB9IGZyb20gXCIuLi90eXBlcy9UYWJsZXNcIlxyXG5pbXBvcnQgeyBJUGVvcGxlRW50aXR5RmllbGRzIH0gZnJvbSBcIi4uL3R5cGVzL2ludGVyZmFjZXMvUGVvcGxlXCJcclxuaW1wb3J0IHsgUGlsb3RGaWVsZE5hbWVzIH0gZnJvbSBcIi4uL3R5cGVzL2ludGVyZmFjZXMvUGlsb3RcIlxyXG5pbXBvcnQgeyBGaWxtRmllbGRzTmFtZXMgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9GaWxtXCJcclxuaW1wb3J0IHsgVmVoaWNsZXNJbkZpbG1zRmllbGRzTmFtZXMgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlcy9WZWhpY2xlc0luRmlsbXNcIlxyXG5pbXBvcnQgeyBnZXRBbGwgfSBmcm9tIFwiLi4vREIvZ2V0QWxsXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiB7XHJcbiAgY29uc3QgX2dldEJ5SWQgPSBNZW0oZ2V0QnlJZFF1ZXJ5PEVudGl0eVRhYmxlLlZlaGljbGUsIElWZWhpY2xlUmVzcG9uc2U+KFxyXG4gICAgRW50aXR5VGFibGUuVmVoaWNsZSxcclxuICAgIFtcclxuICAgICAge1xyXG4gICAgICAgIHRhYmxlTmFtZTogRW50aXR5VGFibGUuUGVvcGxlLFxyXG4gICAgICAgIHNob3dGaWVsZHM6IFtJUGVvcGxlRW50aXR5RmllbGRzLklkLCBJUGVvcGxlRW50aXR5RmllbGRzLk5hbWVdLFxyXG4gICAgICAgIGZpZWxkTmFtZUluUmVzcG9uc2U6ICdwaWxvdHMnLFxyXG4gICAgICAgIG1hbnlUb01hbnlUYWJsZU5hbWU6IE1hbnlUb01hbnlUYWJsZS5QaWxvdCxcclxuICAgICAgICBpbnRlcnNlY3RFbnRpdHlPbjogUGlsb3RGaWVsZE5hbWVzLlBlb3BsZUlkLFxyXG4gICAgICAgIHdoZXJlOiBQaWxvdEZpZWxkTmFtZXMuVmVoaWNsZUlkXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0YWJsZU5hbWU6IEVudGl0eVRhYmxlLkZpbG0sXHJcbiAgICAgICAgc2hvd0ZpZWxkczogW0ZpbG1GaWVsZHNOYW1lcy5JZCwgRmlsbUZpZWxkc05hbWVzLlRpdGxlXSxcclxuICAgICAgICBmaWVsZE5hbWVJblJlc3BvbnNlOiAnZmlsbXMnLFxyXG4gICAgICAgIG1hbnlUb01hbnlUYWJsZU5hbWU6IE1hbnlUb01hbnlUYWJsZS5WZWhpY2xlc0luRmlsbXMsXHJcbiAgICAgICAgaW50ZXJzZWN0RW50aXR5T246IFZlaGljbGVzSW5GaWxtc0ZpZWxkc05hbWVzLkZpbG1JZCxcclxuICAgICAgICB3aGVyZTogVmVoaWNsZXNJbkZpbG1zRmllbGRzTmFtZXMuVmVoaWNsZUlkXHJcbiAgICAgIH1cclxuXHJcbiAgICBdXHJcbiAgKSlcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldEJ5SWQ6IF9nZXRCeUlkLFxyXG4gICAgZ2V0QWxsOiBnZXRBbGwoRW50aXR5VGFibGUuVmVoaWNsZSwgX2dldEJ5SWQpXHJcbiAgfVxyXG59KSgpIiwiaW1wb3J0IHsgUm91dGVyLCBSZXNwb25zZSwgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgVmVoaWNsZSAgZnJvbSAnLi4vY29udHJvbGxlcnMvdmVoaWNsZSc7XHJcblxyXG5jb25zdCBSOlJvdXRlciA9IFJvdXRlcigpO1xyXG5cclxuUi5nZXQoJy86aWQnLCBhc3luYyAocmVxOlJlcXVlc3QsIHJlczpSZXNwb25zZSk9PntcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBWZWhpY2xlLmdldEJ5SWQocmVxLnBhcmFtcy5pZCkoKVxyXG4gIHJlcy5qc29uKHJlc3VsdCk7ICAgIFxyXG59KVxyXG5cclxuUi5nZXQoJy8nLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKT0+e1xyXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFZlaGljbGUuZ2V0QWxsKCk7XHJcbiAgcmVzLmpzb24ocmVzdWx0KTtcclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFI7IiwiaW1wb3J0IHsgSVBsYW5ldFJlc3BvbnNlIH0gZnJvbSBcIi4uL3R5cGVzL2ludGVyZmFjZXMvUGxhbmV0XCI7XHJcbmltcG9ydCB7IGFzeW5jTWVtb2l6ZSBhcyBNZW19IGZyb20gJy4uL3V0aWxzL21lbW9pemUnO1xyXG5pbXBvcnQgeyBnZXRCeUlkUXVlcnkgfSBmcm9tIFwiLi4vREIvZ2V0QnlJZFwiO1xyXG5pbXBvcnQgeyBFbnRpdHlUYWJsZSwgVGFibGUsIE1hbnlUb01hbnlUYWJsZSB9IGZyb20gXCIuLi90eXBlcy9UYWJsZXNcIjtcclxuaW1wb3J0IHsgZ2V0QWxsIH0gZnJvbSBcIi4uL0RCL2dldEFsbFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQoKCk9PntcclxuICBjb25zdCBfZ2V0QnlJZCA9IE1lbShnZXRCeUlkUXVlcnk8RW50aXR5VGFibGUuUGxhbmV0LCBJUGxhbmV0UmVzcG9uc2U+KFxyXG4gICAgRW50aXR5VGFibGUuUGxhbmV0LFxyXG4gICAgW1xyXG4gICAgICB7XHJcbiAgICAgICAgdGFibGVOYW1lOiBFbnRpdHlUYWJsZS5QZW9wbGUsXHJcbiAgICAgICAgc2hvd0ZpZWxkczogWydpZCcsICduYW1lJ10sXHJcbiAgICAgICAgZmllbGROYW1lSW5SZXNwb25zZTogJ3Jlc2lkZW50cycsXHJcbiAgICAgICAgbWFueVRvTWFueVRhYmxlTmFtZTogTWFueVRvTWFueVRhYmxlLlJlc2lkZW50LFxyXG4gICAgICAgIGludGVyc2VjdEVudGl0eU9uOiAncGVvcGxlX2lkJyxcclxuICAgICAgICB3aGVyZTogJ3BsYW5ldF9pZCdcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRhYmxlTmFtZTogRW50aXR5VGFibGUuRmlsbSxcclxuICAgICAgICBzaG93RmllbGRzOiBbJ2lkJywgJ3RpdGxlJ10sXHJcbiAgICAgICAgZmllbGROYW1lSW5SZXNwb25zZTogJ2ZpbG1zJyxcclxuICAgICAgICBtYW55VG9NYW55VGFibGVOYW1lOiBNYW55VG9NYW55VGFibGUuUGxhbmV0c0luRmlsbXMsXHJcbiAgICAgICAgaW50ZXJzZWN0RW50aXR5T246ICdmaWxtX2lkJyxcclxuICAgICAgICB3aGVyZTogJ3BsYW5ldF9pZCdcclxuICAgICAgfVxyXG4gICAgXVxyXG4gICkpXHJcbiAgcmV0dXJue1xyXG4gICAgZ2V0QnlJZDogX2dldEJ5SWQsXHJcbiAgICBnZXRBbGw6IGdldEFsbChFbnRpdHlUYWJsZS5QbGFuZXQsIF9nZXRCeUlkKVxyXG4gIH1cclxufSkoKVxyXG5cclxuIiwiaW1wb3J0IGV4cHJlc3Mse1JvdXRlciwgUmVxdWVzdCwgUmVzcG9uc2V9IGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgeyBJUGxhbmV0UmVzcG9uc2UgfSBmcm9tICcuLi90eXBlcy9pbnRlcmZhY2VzL1BsYW5ldCc7XHJcbmltcG9ydCAgUGxhbmV0ICBmcm9tICcuLi9jb250cm9sbGVycy9wbGFuZXQnO1xyXG5cclxuY29uc3QgUjpSb3V0ZXIgPSBSb3V0ZXIoKTtcclxuXHJcblIuZ2V0KCcvOmlkJywgYXN5bmMgKHJlcTpSZXF1ZXN0LCByZXM6UmVzcG9uc2UpPT57XHJcbiAgY29uc3QgcGxhbmV0OklQbGFuZXRSZXNwb25zZSA9IGF3YWl0IFBsYW5ldC5nZXRCeUlkKHJlcS5wYXJhbXMuaWQpKClcclxuICByZXMuanNvbihwbGFuZXQpO1xyXG59KVxyXG5SLmdldCgnLycsIGFzeW5jIChyZXE6UmVxdWVzdCwgcmVzOlJlc3BvbnNlKT0+e1xyXG4gIGNvbnN0IHIgPSBhd2FpdCBQbGFuZXQuZ2V0QWxsKCk7IFxyXG4gIHJlcy5qc29uKHIpO1xyXG59KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUjsiLCJpbXBvcnQgJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSc7XHJcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcydcclxuaW1wb3J0IHsgQXBwbGljYXRpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCBmaWxtIGZyb20gJy4vcm91dGVzL2ZpbG0nO1xyXG5pbXBvcnQge0hlbG1ldCwgSGVsbWV0RGF0YX0gZnJvbSAncmVhY3QtaGVsbWV0JztcclxuaW1wb3J0IGhlbG1ldCBmcm9tICdoZWxtZXQnO1xyXG5jb25zdCBhcHA6IEFwcGxpY2F0aW9uID0gcmVxdWlyZSgnZXhwcmVzcycpKCk7XHJcbmltcG9ydCBwbGFuZXQgZnJvbSAnLi9yb3V0ZXMvcGxhbmV0cyc7XHJcbmltcG9ydCBwZW9wbGUgZnJvbSAnLi9yb3V0ZXMvcGVvcGxlJztcclxuaW1wb3J0IHNwZWNpZSBmcm9tICcuL3JvdXRlcy9zcGVjaWVzJztcclxuaW1wb3J0IHZlaGljbGUgZnJvbSAnLi9yb3V0ZXMvdmVoaWNsZSc7XHJcbmltcG9ydCBzdGFyc2hpcCBmcm9tICcuL3JvdXRlcy9zdGFyc2hpcCc7XHJcbmltcG9ydCB7IG1hdGNoUm91dGVzLCBNYXRjaGVkUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItY29uZmlnJztcclxuaW1wb3J0IFJvdXRlcyBmcm9tICcuLi9jbGllbnQvcm91dGVzJztcclxuaW1wb3J0IGdldFBvcnQgZnJvbSAnLi91dGlscy9wb3J0LWdldHRlcic7XHJcbmltcG9ydCByZW5kZXJSZWFjdEFwcCBmcm9tICcuL3V0aWxzL3JlbmRlclJlYWN0QXBwJztcclxuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgQXBwUmVuZGVyZWRUb1N0cmluZyBmcm9tICcuL3V0aWxzL0FwcFJlbmRlcmVkVG9TdHJpbmcnO1xyXG5cclxuYXBwLnVzZSgnL2FwaS92MS9maWxtcycsIGZpbG0pO1xyXG5hcHAudXNlKCcvYXBpL3YxL3BsYW5ldHMnLCBwbGFuZXQpO1xyXG5hcHAudXNlKCcvYXBpL3YxL3Blb3BsZScsIHBlb3BsZSk7XHJcbmFwcC51c2UoJy9hcGkvdjEvc3BlY2llcycsIHNwZWNpZSk7XHJcbmFwcC51c2UoJy9hcGkvdjEvdmVoaWNsZXMnLCB2ZWhpY2xlKVxyXG5hcHAudXNlKCcvYXBpL3YxL3N0YXJzaGlwcycsIHN0YXJzaGlwKVxyXG5hcHAuZ2V0KCcvKicsIChyZXE6IGFueSwgcmVzOiBhbnksIG5leHQ6ZXhwcmVzcy5OZXh0RnVuY3Rpb24pID0+IHtcclxuICBjb25zdCBwcm9taXNlcyA9IG1hdGNoUm91dGVzKFJvdXRlcywgcmVxLnBhdGgpXHJcbiAgICAubWFwKCh7IHJvdXRlLCBtYXRjaCB9KSA9PiByb3V0ZS5sb2FkRGF0YSA/IHJvdXRlLmxvYWREYXRhKG1hdGNoKSA6IFByb21pc2UucmVzb2x2ZShudWxsKSlcclxuICAgIC5tYXAoKHByb21pc2U6UHJvbWlzZTxhbnk+KSA9PiBwcm9taXNlICYmIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IFxyXG4gICAgICAgICAgcHJvbWlzZS50aGVuKHJlc29sdmUpLmNhdGNoKHJlc29sdmUpXHJcbiAgICAgICAgKSlcclxuICAgaWYocHJvbWlzZXMubGVuZ3RoID4gMCl7XHJcbiAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiByZXMuc2VuZChyZW5kZXJSZWFjdEFwcChyZXEpKSk7XHJcbiAgIH1lbHNle1xyXG4gICAgIG5leHQoKVxyXG4gICAgfSBcclxufSlcclxuLy9hcHAudXNlKCcvKicsIChyZXEsIHJlcyk9PiByZXMuanNvbih7bWVzc2FnZTogJ05vdCBGb3VuZCd9KSlcclxuYXBwLnVzZShoZWxtZXQoKSk7XHJcbmFwcC5saXN0ZW4oZ2V0UG9ydChwcm9jZXNzKSwgKCkgPT4gY29uc29sZS5sb2coYHNlcnZlciBzdGFydGVkIG9uIHBvcnQgJHtnZXRQb3J0KHByb2Nlc3MpfWApKTtcclxuXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2hcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvblwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJrbmV4XCIpOyIsIi8vIFVwZGF0ZSB3aXRoIHlvdXIgY29uZmlnIHNldHRpbmdzLlxyXG5jb25zdCBzID0gcmVxdWlyZShcIi4vc2V0dGluZ3MuanNcIik7XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICBkZXZlbG9wbWVudDoge1xyXG4gICAgY2xpZW50OiAncGcnLFxyXG4gICAgY29ubmVjdGlvbjoge1xyXG4gICAgICB1c2VyOiBzLnVzZXIsXHJcbiAgICAgIGhvc3Q6IHMuaG9zdCxcclxuICAgICAgZGF0YWJhc2U6ICdzdGFyd2FycycsXHJcbiAgICAgIHBhc3N3b3JkOiBzLnBhc3N3b3JkLFxyXG4gICAgICBzc2w6IHRydWVcclxuICAgIH1cclxuICB9XHJcbn07XHJcbiIsIlxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBob3N0OiBcInBnLXN0YXJ3YXJzLnBvc3RncmVzLmRhdGFiYXNlLmF6dXJlLmNvbVwiLFxyXG4gIHVzZXI6IFwicnViZW44NUBwZy1zdGFyd2Fyc1wiLFxyXG4gIHBhc3N3b3JkOiBcIipydWJlbjI4MzQwKlwiXHJcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLXJpZ2h0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZVwiKTsiXSwic291cmNlUm9vdCI6IiJ9